%=================
% Tornado Jump's Battle File
%
% This file works along with TornadoJump.patch
%=================

% delete original data
#delete $Function_802A1000
#delete $Function_802A10E4
#delete $Script_802A1140
#delete $Script_802A11BC
#delete $Script_802A1330
#delete $Script_802A1418
#delete $Script_802A1500
#delete $Script_802A15E8
#delete $Script_802A17D4
#delete $Script_802A19C0
#delete $Script_802A1BAC
#delete $Script_802A1D98
#delete $Script_802A1FFC
#delete $Script_802A2194
#delete $Script_802A2240
#delete $Script_802A2394
#delete $Script_802A26D4
#delete $Script_802A3560
#delete $Script_802A4470

@ $Script_UseMove0
{
    ExecWait $Script_TornadoJump
    Return
    End   
}

#new:Script $Script_TornadoJump
{
        Call  802694A4  ( 00000001 )
        Call  $GetStackBoost ( .Item:TornadoJump_1 1 *VarD .False )
        Exec  $Script_NukeTracker % nuke stylish tracker data
    0:  ExecWait  $Script_TornadoJump_ActionCommand
        % get damage to deal
        Call  $ReadAddress ( 8010F291 0 *Var1 .False .False ) % get hammer
        Switch *Var1
            Case == 0 % Boots
                Add   *VarD  1 % damage to deal
            Case == 1 % Super Boots
                Add   *VarD  2
            Case >= 2 % Ultra Boots
                Add   *VarD  3
        EndSwitch
        Exec $Script_NukeTracker % nuke stylish tracker data
    C:  Call  PlayerTestEnemy   ( *Var0 ~Flags:DamageType:Jump 00000000 00000000 *VarD 00000000 )
   30:  If  *Var0  ==  .HitResult:Miss % 6
   40:  	ExecWait  $Script_MissJump
   4C:  	Return
   54:  EndIf
   5C:  Wait  1`
   68:  Call  DidActionSucceed  ( *Var0 )
   78:  Switch  *Var0
   84:  	Case  >  .False
   90:  		Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015A 00000000 )
   AC:  		Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:Jump 00000000 ~DebuffType:Sleep:3:75` *VarD 00000050 )
   D0:  	Default
   D8:  		Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015A 00000000 )
   F4:  		Call  PlayerDamageEnemy ( *Var0 ~Flags:DamageType:Jump 00000000 ~DebuffType:Sleep:3:75` *VarD 00000030 )
  118:  EndSwitch
  120:  Switch  *Var0
  12C:  	CaseOR  ==  .HitResult:Hit % 0
  138:  	CaseOR  ==  00000002 % 2
  144:  		ExecWait  $Script_GoBackToHome_Failed_Tornado
  150:  		Return
  158:  	EndCaseGroup
  160:  	CaseOR  ==  00000001 % 1
  16C:  	CaseOR  ==  00000003 % 3
  178:  	EndCaseGroup
  180:  EndSwitch
  188:  ChildThread
  190:  	Call  UseBattleCamPreset    ( 0000001B )
  1A0:  	Wait  5`
  1BC:  	Call  UseBattleCamPreset    ( 00000023 )
  1CC:  EndChildThread
        % Player jumped on the enemy
  1D4:  Call  80269524  ( *VarF ) % load battleStatus(0x86)
  1E4:  Call  CloseActionCommandInfo
  1F0:  Call  LoadActionCommand ( .ActionCommand:Jump )
  200:  Call  802A9000 % CreateActionCommandIcons
  20C:  Call  802694A4  ( .False ) % ShowActionCommandIcons
  230:  Call  SetGoalToTarget   ( .Actor:Player )
        Thread % rotate Mario
            Call    GetActorRotation ( .Actor:Player *Var0 *Var1 *Var2 )
            Call    $WriteAddress ( $End[1] 0 .True .False .False ) % $End[1] = Mario is spinning (bool)
            % First spin
            Loop 10`
                Sub *Var1 20` % y
                If *Var1 < -360`
                    Set *Var1 0
                EndIf
                Call    SetActorRotation ( .Actor:Player *Var0 *Var1 *Var2 )
                Wait    1
            EndLoop
            % Second spin - 1
            Loop 70`
                Sub *Var1 50` % y
                If *Var1 < -360`
                    Set *Var1 0
                EndIf
                Call    SetActorRotation ( .Actor:Player *Var0 *Var1 *Var2 )
                Wait    1
            EndLoop
            % Spawn tornados
            %
            % Tornado 1
            Call	PlaySound		( 2023 ) % Tornado
            Call    GetActorPos ( .Actor:Self *Var0 *Var1 *Var2 )
            Add     *Var0 40` % x
            Sub     *Var1 15` % y
            % y
            Call    RandInt ( 30` *Var3 )
            Sub     *Var1 *Var3
            Call    PlayEffect    	( ~FX:Whirlwind *Var0 *Var1 *Var2 *Fixed[3.0] 42` .False .False .False .False .False .False .False )
            % Tornado 2
            Call    GetActorPos ( .Actor:Self *Var0 *Var1 *Var2 )
            Add     *Var0 -30` % x
            Add     *Var1 15` % y
            % y
            Call    RandInt ( 20` *Var3 )
            Add     *Var1 *Var3
            Call    PlayEffect    	( ~FX:Whirlwind *Var0 *Var1 *Var2 *Fixed[2.0] 42` .False .False .False .False .False .False .False )
            % Tornado 3
            Call    GetActorPos ( .Actor:Self *Var0 *Var1 *Var2 )
            Add     *Var0 -20` % x
            Add     *Var1 -40` % y
            % y
            Call    RandInt ( 10` *Var3 )
            Sub     *Var0 *Var3
            Call    PlayEffect    	( ~FX:Whirlwind *Var0 *Var1 *Var2 *Fixed[2.0] 42` .False .False .False .False .False .False .False )
            % Second spin - 2
            Call    GetActorRotation ( .Actor:Player *Var0 *Var1 *Var2 )
            Loop 30`
                Sub *Var1 50` % y
                If *Var1 < -360`
                    Set *Var1 0
                EndIf
                Call    SetActorRotation ( .Actor:Player *Var0 *Var1 *Var2 )
                Wait    1
            EndLoop
            % Third spin
            Loop
                Sub *Var1 10` % y
                If *Var1 < -330`
                    Call    SetActorRotation ( .Actor:Player *Var0 *Var1 *Var2 )
                    BreakLoop
                EndIf
                Call    SetActorRotation ( .Actor:Player *Var0 *Var1 *Var2 )
                Wait    1
            EndLoop
            % Fourth spin
            Loop
                Sub *Var1 5` % y
                If *Var1 <= -360`
                    Set     *Var1 0
                    Call    SetActorRotation ( .Actor:Player *Var0 *Var1 *Var2 )
                    Call    $WriteAddress ( $End[1] 0 .False .False .False ) % $End[1] = Mario is spinning (bool)
                    BreakLoop
                EndIf
                Call    SetActorRotation ( .Actor:Player *Var0 *Var1 *Var2 )
                Wait    1
            EndLoop
        EndThread
        Call  GetGoalPos ( .Actor:Player *Var0 *Var1 *Var2 )
        Add   *Var1 20` % y
        Call  SetGoalPos ( .Actor:Player *Var0 *Var1 *Var2 )
        Call  SetAnimation ( .Actor:Player 00000000 .PlayerAnim:MidairStill )
        Call  SetActorSpeed ( .Actor:Player *Fixed[5.0] )
        Call  FlyToGoal ( .Actor:Player 0 0 .Easing:Linear )
        Wait  1
  280:  Call  SetActorSounds    ( .Actor:Player .ActorSound:Hurt 0000015A 00000000 )
  2C0:  Call  80269550  ( *VarF ) % write in battleStatus(0x86)
        %=====================
        % 2nd Action Command
        %=====================
        % I patched tidal wave's action command global function a little bit, use this next
        % byte to use the new code instead of the original one.
        Call  $WriteAddress ( $TornadoJumpByte 0 .True .False .False )
        Call  LoadActionCommand     ( .ActionCommand:TidalWave )
        Call  802A9000 % CreateActionCommandIcons
        Call  802691C8      ( 00000005 00000014 0000001E 0000003C 00000050 00000064 )
        Call  802A9138      ( 00000000 00000064 00000003 )
        % Action command
        Loop  100`
            Call  802695A8  ( *Var0 )
            Call  $Function_TidalWave_ActionCommand
            Wait  1`
        EndLoop
        Call  $WriteAddress ( $TornadoJumpByte 0 .False .False .False )
        Loop % wait for Mario to stop spinning
            Call    $ReadAddress ( $End[1] 0 *Var0 .False .False ) % $End[1] = Mario is spinning (bool)
            If *Var0 == .False
                BreakLoop
            EndIf
            Wait    1
        EndLoop
        Call  GetActionSuccessCopy  ( *Var0 )
        Set   *VarD  *Var0
        Call  $WriteAddress ( 800DC070 0 .True 81 .False ) % actionSuccess byte
        Exec  $Script_InitTracker % start tracking stylish inputs
        Call  UseBattleCamPreset      ( 00000002 )
        Call  MoveBattleCamOver ( 00000005 )
        Wait  15`
        % Damage targets
        Call  InitTargetIterator
        Call  ChooseNextTarget ( .Iter:First .False )
        Loop
            Call  SetGoalToTarget   ( .Actor:Self )
            Call  PlayerTestEnemy  ( *Var0 ~Flags:DamageType:0 00000014 00000000 00000002 00000010 )
            If  *Var0  ==  .HitResult:Miss % 6
                Goto  A
            EndIf
            Switch  *VarD
                Case  >=  00000001
                    Call  PlayerDamageEnemy    ( *Var0 38000000 00000000 00000000 *VarD 00000070 )
                Default
                    Call  PlayerDamageEnemy    ( *Var0 38000000 00000000 00000000 *VarD 00000030 )
            EndSwitch
            Wait  5`
            Label  A
            Call  ChooseNextTarget  ( .Iter:Next *Var0 )
            If  *Var0  ==  FFFFFFFF % FFFFFFFF
                BreakLoop
            EndIf
        EndLoop
        Call  80280818
        % Mario falls to the ground
        Call  GetActorPos ( .Actor:Self *Var0 .False *Var2 )
        Call  GetHomePos ( .Actor:Self .False *Var1 .False )
        Call  SetGoalPos ( .Actor:Self *Var0 *Var1 *Var2 )
        Call  SetActorSpeed ( .Actor:Player *Fixed[8.0] )
        %==========
        % Stylish - 1st Move
        %==========
        Thread
            % Check if the player pressed the A button too soon
            Call $ReadAddress ( $Data_Inputs 0 *Var0 .False .False )
            If *Var0 == .True
                Set *TrackInput .False
                Call $WriteAddress ( $Data_Inputs 0 0 .False .False ) % turn input bool as false again
                Wait 1
                Goto TreadEnd
            EndIf
            % Start tracking the A button - Correct time to press A
            Loop 3
                % Check if player landed to the ground to end everything
                Call GetAnimation ( .Actor:Self 00000000 *Var0 )
                Switch *Var0
                    CaseOR == 00010002
                    CaseOR == 00010009
                        BreakLoop % Mario landed to the ground
                    EndCaseGroup
                EndSwitch
                Call $ReadAddress ( $Data_Inputs 0 *Var0 .False .False )
                If *Var0 == .False
                    % Timing Tutor Badge
                    ExecWait $Script_TimingTutor % writes in var0,1,2
                Else
                    BreakLoop
                EndIf
                Wait 1
            EndLoop
            Label TreadEnd
            Set *TrackInput .False
        EndThread
        Call  SetAnimation ( .Actor:Player 00000000 .PlayerAnim:Midair )
        Call  FlyToGoal ( .Actor:Player 0 0 .Easing:Linear )
        Call  SetAnimation ( .Actor:Player 00000000 00010009 ) % land to the ground
        ExecWait $Script_DoStylish_TornadoJump
  2D0:  ExecWait  $Script_GoBackToHome_Succeed_Tornado
  2DC:  Return
  2E4:  End
}

#new:Function $Function_TidalWave_ActionCommand
{
    0:  LIF       F3, 2.125
    8:  MTC1      R0, F2
    C:  LWC1      F0, 84 (A0)
   10:  CVT.D.W   F0, F0
   14:  MUL.D     F0, F0, F2
   18:  NOP
   1C:  LIF       F3, 3.390625
   24:  MTC1      R0, F2
   28:  NOP
   2C:  DIV.D     F0, F0, F2
   30:  LIF       F3, 1.875
   38:  MTC1      R0, F2
   3C:  LAW       V0, 800DC14C
   44:  ADD.D     F0, F0, F2
   48:  LWC1      F10, 170 (V0)
   4C:  CVT.S.D   F0, F0
   50:  SUB.S     F2, F0, F10
   54:  LIF       F8, 3.0
   5C:  NOP
   60:  DIV.S     F2, F2, F8
   64:  ADD.S     F10, F10, F2
   68:  LWC1      F6, 174 (V0)
   6C:  SUB.S     F2, F0, F6
   70:  LWC1      F4, 178 (V0)
   74:  SUB.S     F0, F0, F4
   78:  DIV.S     F2, F2, F8
   7C:  ADD.S     F6, F6, F2
   80:  DIV.S     F0, F0, F8
   84:  ADD.S     F4, F4, F0
   88:  SWC1      F10, 170 (V0)
   8C:  SWC1      F6, 174 (V0)
   90:  SWC1      F4, 178 (V0)
   94:  JR        RA
   98:  LI        V0, 2
}

#new:Script $Script_GoBackToHome_Succeed_Tornado
{
   44:  Call  SetAnimation  ( .Actor:Player 00000000 00010002 )
   5C:  Wait  5`
   68:  Call  SetGoalToHome ( .Actor:Player )
   78:  Call  SetActorSpeed ( .Actor:Player *Fixed[8.0] )
   8C:  Call  SetAnimation  ( .Actor:Player 00000000 00010005 )
   A4:  Call  PlayerRunToGoal       ( 00000000 )
   B4:  Call  SetAnimation  ( .Actor:Player 00000000 00010002 )
        Call  UseBattleCamPreset    ( 00000002 )
   CC:  Return
   D4:  End
}

#new:Script $Script_MissJump
{
    0:  Call  SetJumpAnimations ( .Actor:Player 00000000 00000000 00000000 0001000C )
   20:  Call  PlayerLandJump
   2C:  Call  SetAnimation      ( .Actor:Player 00000000 0001000C )
   44:  Wait  2`
   50:  ChildThread
   58:  	Call  ShakeCam  ( .Cam:Battle 00000000 00000005 *Fixed[1.0] )
   74:  EndChildThread
   7C:  Call  PlaySoundAtActor  ( .Actor:Player 00000162 )
   90:  Call  SetAnimation      ( .Actor:Player 00000000 00010030 )
   A8:  Wait  10`
   B4:  Call  SetAnimation      ( .Actor:Player 00000000 00010031 )
   CC:  Wait  20`
   D8:  Call  SetBattleFlagBits ( 00000100 .False )
   EC:  Call  UseBattleCamPreset    ( 00000003 )
   FC:  Call  802693F0
  108:  Call  EnablePlayerBlur  ( FFFFFFFF )
  118:  Call  80276EFC
  124:  Call  SetGoalToHome     ( .Actor:Player )
  134:  Call  SetActorSpeed     ( .Actor:Player *Fixed[8.0] )
  148:  Call  SetAnimation      ( .Actor:Player 00000000 00010005 )
  160:  Call  PlayerRunToGoal   ( 00000000 )
  170:  Call  SetAnimation      ( .Actor:Player 00000000 00010002 )
  188:  Return
  190:  End
}

#new:Script $Script_GoBackToHome_Failed_Tornado
{
    0:  Call  80276EFC
    C:  Call  SetBattleFlagBits ( 00000100 .False )
   20:  Call  UseBattleCamPreset    ( 0000001D )
   30:  Call  802693F0
   3C:  Call  GetActorPos   ( .Actor:Player *Var0 *Var1 *Var2 )
   58:  Sub   *Var0  00000028
   68:  Set   *Var1  00000000
   78:  Call  SetGoalPos    ( .Actor:Player *Var0 *Var1 *Var2 )
   94:  Call  SetJumpAnimations ( .Actor:Player 00000000 00010007 00010008 00010009 )
   B4:  Call  SetActorJumpGravity   ( .Actor:Player *Fixed[1.0] )
   C8:  Call  $Function_802A1000_TornadoJump
   D4:  Call  80273444      ( *Var0 00000000 00000000 )
   EC:  Call  SetAnimation  ( .Actor:Player 00000000 00010009 )
  104:  Wait  1`
  110:  Call  AddGoalPos    ( .Actor:Player FFFFFFEC 00000000 00000000 )
  12C:  Call  80273444      ( 00000006 00000000 00000002 )
  144:  Call  SetAnimation  ( .Actor:Player 00000000 00010009 )
  15C:  Wait  2`
  168:  Call  EnablePlayerBlur  ( FFFFFFFF )
  178:  Call  SetGoalToHome ( .Actor:Player )
  188:  Call  SetActorSpeed ( .Actor:Player *Fixed[8.0] )
  19C:  Call  SetAnimation  ( .Actor:Player 00000000 00010005 )
  1B4:  Call  PlayerRunToGoal   ( 00000000 )
  1C4:  Call  SetAnimation  ( .Actor:Player 00000000 00010002 )
  1DC:  Return
  1E4:  End
}

#new:Function $Function_802A1000_TornadoJump
{
    0:  ADDIU     SP, SP, FFD8
    4:  LA        V1, 800DC070
    C:  SW        RA, 20 (SP)
   10:  SW        S1, 1C (SP)
   14:  SW        S0, 18 (SP)
   18:  LW        V0, D8 (V1)
   1C:  COPY      S0, A0
   20:  LWC1      F2, 1C (V0)
   24:  LWC1      F12, 144 (V0)
   28:  LWC1      F14, 148 (V0)
   2C:  LWC1      F4, 14C (V0)
   30:  LWC1      F6, 18 (V0)
   34:  LWC1      F0, 20 (V0)
   38:  MFC1      A2, F4
   3C:  MFC1      A3, F6
   40:  COPY      S1, V1
   44:  SWC1      F2, 10 (SP)
   48:  JAL       ~Func:dist3D
   4C:  SWC1      F0, 14 (SP)
   50:  LIF       F2, 15.0
   58:  NOP
   5C:  MUL.S     F0, F0, F2
   60:  NOP
   64:  LIF       F2, 100.0
   6C:  NOP
   70:  DIV.S     F0, F0, F2
   74:  TRUNC.W.S F8, F0
   78:  MFC1      V0, F8
   7C:  NOP
   80:  SW        V0, 84 (S0)
   84:  SLTI      V0, V0, 15
   88:  BNE       V0, R0, .o94
   8C:  LI        V0, 14
   90:  SW        V0, 84 (S0)
        .o94
   94:  LB        V0, 83 (S1)
   98:  BEQ       V0, R0, .oB8
   9C:  NOP
   A0:  LW        V0, 84 (S0)
   A4:  SLTI      V0, V0, 6
   A8:  BEQ       V0, R0, .oCC
   AC:  LI        V0, 6
   B0:  BEQ       R0, R0, .oCC
   B4:  SW        V0, 84 (S0)
        .oB8
   B8:  LW        V0, 84 (S0)
   BC:  SLTI      V0, V0, C
   C0:  BEQ       V0, R0, .oCC
   C4:  LI        V0, C
   C8:  SW        V0, 84 (S0)
        .oCC
   CC:  LW        RA, 20 (SP)
   D0:  LW        S1, 1C (SP)
   D4:  LW        S0, 18 (SP)
   D8:  LI        V0, 2
   DC:  JR        RA
   E0:  ADDIU     SP, SP, 28
}

#new:Script $Script_TornadoJump_ActionCommand
{
    0:  Call  LoadActionCommand ( .ActionCommand:Jump )
   10:  Call  802A9000
   1C:  ExecWait  $Script_802A11AC_TornadoJump
   28:  ExecWait  $Script_802A1320_TornadoJump
   34:  Call  802A9120  ( *VarA 00000003 )
   48:  Call  UseBattleCamPreset    ( 00000022 )
   58:  Call  SetGoalToTarget   ( .Actor:Player )
   68:  Call  SetJumpAnimations ( .Actor:Player 00000000 00010007 00010008 00030000 )
   88:  Call  80274A18  ( *VarA 00000000 )
   9C:  Return
   A4:  End
}

#new:Script $Script_802A11AC_TornadoJump
{
    0:  Call  SetGoalToFirstTarget  ( .Actor:Self )
   10:  Call  GetGoalPos        ( .Actor:Self *Var0 *Var1 *Var2 )
   2C:  Sub   *Var0  00000028
   3C:  Call  InitTargetIterator
   48:  Call  SetGoalToTarget   ( .Actor:Player )
   58:  Call  GetGoalPos        ( .Actor:Player *Var3 *Var4 *Var5 )
   74:  Sub   *Var3  *Fixed[70.0]
   84:  If  *Var0  <  *Var3
   94:  	Set   *Var3  *Var0
   A4:  EndIf
   AC:  Call  SetGoalPos    ( .Actor:Player *Var3 *Var4 *Var5 )
   C8:  Call  UseBattleCamPreset        ( 0000001A )
   D8:  Call  SetActorSpeed ( .Actor:Player *Fixed[5.0] )
   EC:  Call  SetAnimation  ( .Actor:Player 00000000 00010005 )
  104:  Call  CancelablePlayerRunToGoal ( 00000000 *Var0 )
  118:  Call  SetAnimation  ( .Actor:Player 00000000 00010002 )
  130:  Call  SetGoalToTarget   ( .Actor:Player )
  140:  ExecWait  $Script_802A1130_TornadoJump
  14C:  Call  SetAnimation  ( .Actor:Player 00000000 00010006 )
  164:  Return
  16C:  End
}

#new:Script $Script_802A1130_TornadoJump
{
    0:  Call  SetAnimation  ( .Actor:Player 00000000 00010006 )
   18:  Loop  00000005
   24:  	Call  CheckButtonPress  ( ~Flags:Buttons:A *Var0 )
   38:  	If  *Var0  ==  .True
   48:  		BreakLoop
   50:  	EndIf
   58:  	Wait  1`
   64:  EndLoop
   6C:  Return
   74:  End
}

#new:Script $Script_802A1320_TornadoJump
{
    0:  Call  SetGoalToTarget   ( .Actor:Player )
   10:  Call  GetGoalPos        ( .Actor:Player *Var6 *Var7 *Var8 )
   2C:  Call  GetActorPos       ( .Actor:Player *Var7 *Var8 *Var9 )
   48:  If  *Var6  >  *Var7
   58:  	Sub   *Var6  *Var7
   68:  Else
   70:  	Sub   *Var7  *Var6
   80:  	Set   *Var6  *Var7
   90:  EndIf
   98:  Sub   *Var6  00000014
   A8:  DivF  *Var6  *Fixed[10.588867]
   B8:  AddF  *Var6  0000000F
   C8:  Set   *VarA  *Var6
   D8:  Return
   E0:  End
}

#new:Script $Script_DoStylish_TornadoJump
{
    % Check if the player pressed the A button too soon or didn't press it.
    Call $ReadAddress ( $Data_Inputs 0 *Var0 .False .False )
    If *Var0 == .False
        Wait 4
        Goto End
    EndIf
    % Player pressed A at the right time
    Call $ReadAddress ( $Data_Inputs 0 *Var0 .False .False )
    % Set *Var0 .True % testing
    If *Var0 == .True
        % Add 1 to the stylish counter (last move only)
        Call $ReadAddress  ( $Data_Inputs 0 *Var0 2 .False )
        Add *Var0 1
        Call $WriteAddress ( $Data_Inputs 0 *Var0 2 .False )
        Set *VarA .False % this move doesn't have an SP cap
        ExecWait $Script_DoStylishFX
        Call $WriteAddress  ( $End[1] 0 .False .False .False ) % $End[1] = stop rotating (bool)
        Thread % rotate mario
            Call  SetActorRotationOffset    ( .Actor:Player 0 16` 0 )
            Loop
                Call    GetActorRotation ( .Actor:Player *Var0 *Var1 *Var2 )
                Add     *Var2 45` % z
                If *Var2 > 360`
                    Set *Var2 0
                EndIf
                Call    SetActorRotation ( .Actor:Player *Var0 *Var1 *Var2 )
                Call $ReadAddress  ( $End[1] 0 *Var0 .False .False )
                If *Var0 == .True
                    Call    SetActorRotation  ( .Actor:Player 0 0 0 )
                    Call    SetActorRotationOffset    ( .Actor:Player 0 0 0 )
                    BreakLoop
                EndIf
                Wait    1
            EndLoop
        EndThread
        % Turn off tracker
        Set *TrackInput .False
        Call $WriteAddress ( $Data_Inputs 0 0 .False .False ) % turn input bool as false again
        % move mario to home
        Call    SetAnimation ( .Actor:Player 00000000 00010015 ) % guard
        Call    SetActorSpeed ( .Actor:Player *Fixed[5.0] )
        Call    SetGoalToHome ( .Actor:Self )
        %==================
        % 2nd stylish move
        %==================
        Thread
            Wait 1
            Exec $Script_InitTracker % start tracking stylish inputs
            Loop % wait until player is close to home
                Call    GetDistanceToGoal ( .Actor:Self *Var0 )
                If *Var0 <= 40`
                    BreakLoop
                EndIf
                Wait 1
            EndLoop
            % Check if Player pressed A too soon
            Call $ReadAddress ( $Data_Inputs 0 *Var0 .False .False )
            If *Var0 == .True
                Wait 1
                Goto ThreadEnd2
            EndIf
            % Start tracking the A button - Correct time to press A
            Loop 3
                % Check if player reached home
                Call GetAnimation ( .Actor:Self 00000000 *Var0 )
                If *Var0 != 00010015
                    BreakLoop % Mario reached home
                EndIf
                Call $ReadAddress ( $Data_Inputs 0 *Var0 .False .False )
                If *Var0 == .False
                    % Timing Tutor Badge
                    ExecWait $Script_TimingTutor % writes in var0,1,2
                Else
                    Wait 1
                    Goto ThreadEnd2_2
                EndIf
                Wait 1
            EndLoop
            Label ThreadEnd2
            Set   *TrackInput .False
            Call  $WriteAddress ( $Data_Inputs 0 0 .False .False ) % turn input bool as false again
            Label ThreadEnd2_2
        EndThread
        Call    FlyToGoal ( .Actor:Self 0 0 .Easing:Linear )
        Call    $WriteAddress  ( $End[1] 0 .True .False .False ) % stop rotating
        % 2nd Stylish - Check if player pressed A at the right time
        Call $ReadAddress ( $Data_Inputs 0 *Var0 .False .False )
        If *Var0 == .True
            % Add 1 to the stylish counter (last move only)
            Call    $ReadAddress  ( $Data_Inputs 0 *Var0 2 .False )
            Add     *Var0 1
            Call    $WriteAddress ( $Data_Inputs 0 *Var0 2 .False )
            Set     *VarA .False % this move doesn't have an SP cap
            ExecWait $Script_DoStylishFX
            Call    SetAnimation ( .Actor:Player 00000000 .PlayerAnim:GotItem )
            Wait    35`
        Else
            Call    SetAnimation ( .Actor:Player 00000000 00010002 ) % idle
            Wait    12`
        EndIf
    EndIf
    Label End
    Set *TrackInput .False
    Call $WriteAddress ( $Data_Inputs 0 0 .False .False ) % turn input bool as false again
    Return
    End
}
