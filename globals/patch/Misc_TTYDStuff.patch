% This add patch a bunch of random stuff to behave more like in TTYD

%================
% Battle - Fight won - Use the same animation as TTYD (stay on the same pos and just use the walking animation)
%================

% Don't move player
@Function 18E794 % 8025FEB4
{
    NOP
}

% Don't move Partner
@Function 18E7A0 % 8025FEC0
{
    NOP
}

% Don't use the "grab cap animation"
@Function:Battle 18E6F4 % 8025FE14
{
    LIO     A2, 00010004 % walking
    JAL	    ~Func:set_animation
    RESERVED
}


%================
% Patching FXs
%================

% Fire Flower - Fire Balls - Move balls to the opposite side when an enemy use a fire flower against Mario/Partner
@Function 37F834 % E007E114
{
    LIO     AT $37F834
    JR      AT
    NOP    
}

#new:Function $37F834
{
    PUSH    T0, T1, T2
    % Check if player is inside battle
    LABU    T0, 80074094 % load game state
    ORI     T1, R0, 1 % Battle
    BNE     T0, T1, .Skip
    NOP
    % Player is inside a battle
    %
    % check if actor using the item is an enemy
    LAW     T1, 800DC068 % battleState
    ORI     T2, R0, 15 % .BattleState:EnemyMove
    BNE     T1, T2, .Skip
    NOP
    % Attacker is an enemy, throw the balls to the left side
    LIF     F22, -8.0
    BEQ     R0, R0, .End
    RESERVED
    .Skip
    % original code
    LIF     F22, 8.0
    .End
    POP     T0, T1, T2
    % restore vanilla code
    LUI	    AT, E008
    LDC1	F20, EC40 (AT)
    LIO     AT, E007E124
    JR      AT
    NOP
}

% Fire Flower - Fire Balls - Make spread size smaller when an enemy use a fire flower against Mario/Partner
@Function 37F890 % E007E170
{
    LIO     AT $37F890
    JR      AT
    NOP
}

#new:Function $37F890
{
    PUSH    T0, T1, T2
    % Check if player is inside battle
    LABU    T0, 80074094 % load game state
    ORI     T1, R0, 1 % Battle
    BNE     T0, T1, .Skip
    NOP
    % Player is inside a battle
    %
    % check if actor using the item is an enemy
    LAW     T1, 800DC068 % battleState
    ORI     T2, R0, 15 % .BattleState:EnemyMove
    BEQL    T1, T2, .Skip
    CLEAR   A0 % Attacker is an enemy
    .Skip
    % original code
    ORI     A0, R0, 50
    .End
    POP     T0, T1, T2
    % restore vanilla code
    MUL.D	F0, F0, F20
    ADDIU	S1, S1, 004C
    LIO     AT, E007E184
    JR      AT
    CVT.S.D	F0, F0
}

% Stats Boost Arrows

% Extend number cap from 9 to 99
%
% If amount is above 9 replace the symbol with
% the 2nd digit
%
% from func_E00AC2A4 % ~func:update_fx56
@Function 3AF524 % E00AC704
{
    LIO     AT, $E00AC704
    JR      AT
    NOP
}

#new:Function $E00AC704
{
    PUSH    T0, T1, T2
    % S7 = Amount (signed)
    % A2 = Amount
    %
    % check if amount from the arrow is >= 10`
    SLTIU   T0, A2, 10`
    BNE     T0, R0, .End
    NOP
    % Get left digit
    COPY    T1, A2
    ORI     T0, R0, 10`
    DIVU    T1, T0
    MFLO    T1 % T1 = left digit
    % get new number address
    LIO     V0, 66666667
    MULT	T1, V0
    SRA	    V0, T1, 31`
    MFHI	T2
    SRA	    V1, T2, 2
    SUBU	V1, V1, V0
    SLL	    V0, V1, 2
    ADDU	V0, V0, V1
    SLL	    V0, V0, 1
    SUBU	V0, T1, V0
    SLL	    V0, V0, 2
    LUI	    V1, E00B
    ADDU	V1, V1, V0
    LW	    V1, C7C8 (V1) % load new numbers
    .End
    POP     T0, T1, T2
    % restore vanilla code
    SW	    V1, 0014 (A1) % save symbol
    LUI	    A2, D838
    LIO     A0, 8009A66C
    LIO     AT, E00AC714
    JR      AT
    NOP
}

%========================
% Disable Focus mechanic

% Disable Focus from the Star Powers list
@Function 41B250 % 802A64C0
{
    SB	R0, 01F6 (S6)
}

%================
% Overworld - ~Func:add_badge
%================

#export:Data $BadgesFoundFlagList {
    *FLAG_SPIN_SMASH
    *FLAG_MULTIBOUNCE
    *FLAG_POWER_PLUS_A
    *FLAG_DODGE_MASTER
    *FLAG_POWER_BOUNCE
    *FLAG_SPIKE_SHIELD
    *FLAG_FIRST_ATTACK
    *FLAG_HP_PLUS_A
    *FLAG_QUAKE_HAMMER
    *FLAG_DOUBLE_DIP
    *FLAG_MYSTERY_SCROLL
    *FLAG_SLEEP_STOMP
    *FLAG_FIRE_SHIELD
    *FLAG_QUICK_CHANGE
    *FLAG_D_DOWN_POUND
    *FLAG_DIZZY_STOMP
    *FLAG_SMASH_CHARGE0
    *FLAG_PRETTY_LUCKY
    *FLAG_FEELING_FINE
    *FLAG_ATTACK_FX_A
    *FLAG_ALLOR_NOTHING
    *FLAG_HP_DRAIN
    *FLAG_JUMP_CHARGE0
    *FLAG_SLOW_GO
    *FLAG_FP_PLUS_A
    *FLAG_MEGA_RUSH
    *FLAG_ICE_POWER
    *FLAG_DEFEND_PLUS_A
    *FLAG_PAY_OFF
    *FLAG_MONEY_MONEY
    *FLAG_CHILL_OUT
    *FLAG_HAPPY_HEART_A
    *FLAG_ZAP_TAP
    *FLAG_BERSERKER
    *FLAG_RIGHT_ON
    *FLAG_RUNAWAY_PAY
    *FLAG_REFUND
    *FLAG_FLOWER_SAVER_A
    *FLAG_TRIPLE_DIP
    *FLAG_HAMMER_THROW
    *FLAG_MEGA_QUAKE
    *FLAG_SMASH_CHARGE
    *FLAG_JUMP_CHARGE
    *FLAG_S_SMASH_CHG
    *FLAG_S_JUMP_CHG
    *FLAG_POWER_RUSH
    *FLAG_AUTO_JUMP
    *FLAG_AUTO_SMASH
    *FLAG_CRAZY_HEART
    *FLAG_LAST_STAND
    *FLAG_CLOSE_CALL
    *FLAG_P_UP_D_DOWN
    *FLAG_LUCKY_DAY
    *FLAG_MEGA_HP_DRAIN
    *FLAG_P_DOWN_D_UP
    *FLAG_POWER_QUAKE
    *FLAG_AUTO_MULTIBOUNCE
    *FLAG_FLOWER_FANATIC
    *FLAG_HEART_FINDER
    *FLAG_FLOWER_FINDER
    *FLAG_SPIN_ATTACK
    *FLAG_DIZZY_ATTACK
    *FLAG_I_SPY
    *FLAG_SPEEDY_SPIN
    *FLAG_BUMP_ATTACK
    *FLAG_POWER_JUMP
    *FLAG_SUPER_JUMP
    *FLAG_MEGA_JUMP
    *FLAG_POWER_SMASH
    *FLAG_SUPER_SMASH
    *FLAG_MEGA_SMASH
    *FLAG_UNUSED_POWER_SMASH1
    *FLAG_UNUSED_POWER_SMASH2
    *FLAG_DEEP_FOCUS_A
    *FLAG_SUPER_FOCUS
    *FLAG_SHRINK_SMASH
    *FLAG_SHELL_CRACK
    *FLAG_KAIDEN
    *FLAG_D_DOWN_JUMP
    *FLAG_SHRINK_STOMP
    *FLAG_DAMAGE_DODGE_A
    *FLAG_EARTHQUAKE_JUMP
    *FLAG_DEEP_FOCUS_B
    *FLAG_DEEP_FOCUS_C
    *FLAG_HP_PLUS_B
    *FLAG_FP_PLUS_B
    *FLAG_HAPPY_HEART_B
    *FLAG_HAPPY_HEART_X
    *FLAG_FLOWER_SAVER_B
    *FLAG_FLOWER_SAVER_X
    *FLAG_DAMAGE_DODGE_B
    *FLAG_DAMAGE_DODGE_X
    *FLAG_POWER_PLUS_B
    *FLAG_POWER_PLUS_X
    *FLAG_DEFEND_PLUS_X
    *FLAG_DEFEND_PLUS_Y
    *FLAG_HAPPY_FLOWER_A
    *FLAG_HAPPY_FLOWER_B
    *FLAG_HAPPY_FLOWER_X
    *FLAG_GROUP_FOCUS
    *FLAG_PEEKABOO
    *FLAG_ATTACK_FX_D
    *FLAG_ATTACK_FX_B
    *FLAG_ATTACK_FX_E
    *FLAG_ATTACK_FX_C
    *FLAG_ATTACK_FX_F
    *FLAG_HP_PLUS_C
    *FLAG_HP_PLUS_X
    *FLAG_HP_PLUS_Y
    *FLAG_FP_PLUS_C
    *FLAG_FP_PLUS_X
    *FLAG_FP_PLUS_Y
    *FLAG_HEALTHY_HEALTHY
    *FLAG_UNUSED_ATTACK_FX_1
    *FLAG_UNUSED_ATTACK_FX_2
    *FLAG_UNUSED_ATTACK_FX_3
    *FLAG_UNUSED_ATTACK_FX_4
    -1 %end of list
}

#export:Function $GetValidBadgeFlagsSize { %returns number of entries in $BadgesFoundFlagList
    DADDU v0, r0, r0
    LI t0, $BadgesFoundFlagList
    ADDIU t1, r0, -1
    .loop
    LW t2, 0000 (t0)
    BEQ t1, t2, .exit
    NOP
    ADDIU t0, t0, 4
    BEQ r0, r0, .loop
    ADDIU v0, v0, 1
    .exit
    JR RA
    NOP
}

@Function:Global 80135A2C {
    J $setBadgeFlagCode
    LH v1, 0018 (s1)
}

#new:Function $setBadgeFlagCode {
    SH v1, 00B4 (v0) %restore from hook (sets badge in inventory)
    JAL $SetBadgeFlag
    ADDU a0, v1, r0
    J 80135A34
    LH v1, 0018 (s1) %restore from hook
}

#export:Function $GetBadgeFlag { %takes arg a0, item index (for badge)
    PUSH ra
    ADDIU v0, r0, -1
    SLTI t0, a0, 00E0
    BNE t0, r0, .isNotBadge
    NOP
    SLTI t0, a0, 0155
    BEQ t0, r0, .isNotBadge
    NOP
    %is badge, set flag
    LI t0, $BadgesFoundFlagList
    ADDIU a0, a0, -E0 %subtract start of list (spin smash is ID 0xE0 and is the first badge)
    SLL t1, a0, 2 %multiply by sizeof FLAG var (4 bytes)
    ADDU t1, t1, t0 %now points to current flag
    DADDU a0, r0, r0 %clear script context ptr
    JAL ~Func:get_variable
    LW a1, 0000 (t1) %load cur flag to set
    %returns result to v0

    .isNotBadge
    POP ra
    JR RA
    NOP
}

#export:Function $SetBadgeFlag { %takes arg a0, item index (for badge)
    PUSH ra
    SLTI t0, a0, 00E0
    BNE t0, r0, .isNotBadge
    NOP
    SLTI t0, a0, 0155
    BEQ t0, r0, .isNotBadge
    NOP
    %is badge, set flag
    LI t0, $BadgesFoundFlagList
    ADDIU a0, a0, -E0 %subtract start of list (spin smash is ID 0xE0 and is the first badge)
    SLL t1, a0, 2 %multiply by sizeof FLAG var (4 bytes)
    ADDU t1, t1, t0 %now points to current flag
    DADDU a0, r0, r0 %clear script context ptr
    LW a1, 0000 (t1) %load cur flag to set
    JAL ~Func:set_variable
    ORI a2, r0, 1 %set to true

    .isNotBadge
    POP ra
    JR RA
    NOP
}

@Hook:Global 800E7740 {
    SW ra, 0010 (sp) %restore from hook
    PUSH a0, v0
    JAL $SetBadgeFlag
    NOP
    POP a0, v0
    SLL v0, a0, 5 %restore from hook
    J 800E7748 %return from hook
    NOP
}

@Function 800E77B4
{
    J   $Function_BadgeInventoryException
}

% If player is in the overworld and it has reached the badges cap
% show a warning and throw the badge.
%
% A0=badgeID
#new:Function $Function_BadgeInventoryException
{
    PUSH    R0, R0, RA, A0, A1, A2, A3, V1, S0
    LABU    A1, 80074094 % game mode (00=overworld)
    BNE     A1, R0, .End
    NOP
    ORI     A0, R0, 107 % works along with Battle_MessageBox_NewIndexes.patch
    JAL     ~Func:show_merlee_message
    ORI     A1, R0, 60`
    % drop item entity
    JAL     $add_badge_to_sold_inventory % add item in sold inventory
    LW      A0, 1C (SP) % POP A0, itemID
    LIO     V0, 800740BC % playerPos
    LW      A1, 0 (V0) % x
    LW      A2, 4 (V0) % y
    LW      A3, 8 (V0) % z
    ORI     V0, R0, 17 % .ItemSpawnMode:Toss_Fade1
    SW      V0, 10 (SP)
    JAL     ~Func:make_item_entity_nodelay
    SW      R0, 14 (SP) % Don't use a pickupFlag
    .End
    POP     R0, R0, RA, A0, A1, A2, A3, V1, S0
    % restore vanilla code
    J       800E77B8
    ADDI    V0, R0, -1 % Return a -1 when there's no more badge slots available instead of zero. (Needed by Parakarry's Parcel Check)
}

%======================
% Player First Strikes
%======================

% Make All or Nothing compatible with the Action Commands from Player's First Strikes
%
% ~Func:calc_player_damage_enemy
@Function:Battle 802721DC
{
NOP
}
