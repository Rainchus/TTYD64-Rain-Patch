% This file add Shine Sprites to the pause menu and holds all functions and scripts needed when
% using Shine Sprites.

% u8 shine sprites = 8010F2A8 (playerStatus(0x18))

%====================
% Pause Menu
%
% Move everything to make space to show the shine sprites
%====================
% Coins
%====================
% Coin icon - y pos
@Function 138D14 % 802459D4
{
    ADDIU	A2, FP, 005D
}

% Coins - Strings global y offset (except for "x")
@Function 138D20 % 802459E0
{
    ADDIU	S0, FP, 0056
}

% Coins - "x"'s y pos
@Function 138D94 % 80245A54
{
    ADDIU	A2, FP, 005D
}
%====================
% Star Points
%====================
% Star Points - Strings global y offset (except for "x")
@Function 138DB4 % 80245A74
{
    ADDIU	S0, FP, 0047
}

% Star Points icon - y pos
@Function 138DC4 % 80245A84
{
    ADDIU	A2, FP, 004E
}

% Star Points - "x"'s y pos
@Function 138E38 % 80245AF8
{
    ADDIU	A2, FP, 004E
}
%====================
% Star Pieces
%====================
% Star Pieces - icon & "x" global y offsets
@Function 138DD0 % 80245A90
{
    ADDIU	S5, FP, 006B
}

% Star Pieces - Strings global y offset (except for "x")
@Function 138E44 % 80245B04
{
    ADDIU	S0, FP, 0064
}
%====================
% HP
%====================
% Heart Points - global strings y offset
@Function 138ED4 % 80245B94
{
    ADDIU	S0, FP, 001D
}

% Heart Points - label y pos
@Function 138EE0 % 80245BA0
{
    ADDIU	A2, FP, 000D
}

% Heart Points - label x pos
@Function 138EEC % 80245BAC
{
    ADDI	A1, S6, 0071
}

% HP Icon y pos
@Function 138EF0 % 80245BB0
{
    ADDIU	A2, FP, 0022
}

% HP Icon x pos
@Function 138F04 % 80245BC4
{
    ADDI	A1, S5, 0059
}

/% "HP" string x pos
@Function 138F34 % 80245BF4
{
    ADDI	A1, S4, 0064
}%/

% Remove the "HP" string
@Function 138F3C % 80245BFC
{
    NOP
}

% Current HP - x pos
@Function 138F64 % 80245C24
{
    ADDI	A1, S3, 005A
}

% "/" x pos
@Function 138F80 % 80245C40
{
    ADDI	A1, S3, 005B
}

% Max HP x pos
@Function 138FBC % 80245C7C
{
    ADDI	A1, S7, 005D
}

%====================
% FP
%====================
% Flower Points - Label x pos
@Function 138FD0 % 80245C90
{
    ADDI	A1, S6, 00BA
}

% Flower Points - Label y pos
@Function 138FD8 % 80245C98
{
    ADDIU	A2, FP, 000D
}

% Flower icon - x pos
@Function 138FDC % 80245C9C
{
    ADDI	A1, S5, 00A3
}

% Flower Icon - y pos
@Function 138FE8 % 80245CA8
{
    ADDIU	A2, FP, 0024
}

% Flower Points - global strings y offset
@Function 138FF4 % 80245CB4
{
    ADDIU	S0, FP, 001D
}

/% "FP" string x pos
@Function 139004 % 80245CC4
{
    ADDI	A1, S4, 00B5
}%/

% Remove the "FP" string
@Function 139018 % 80245CD8
{
    NOP
}

% Current FP x pos
@Function 139020 % 80245CE0
{
    ADDI	A1, S3, 00A3
}

% "/" x pos
@Function 139054 % 80245D14
{
    ADDI	A1, S3, 00A4
}

% Max FP x pos
@Function 139070 % 80245D30
{
    ADDI	A1, S7, 00A6
}

%====================
% BP
%====================
% Badge Points - Label pos
@Function:Pause 13909C % 80245D5C
{
    ADDI	A1, S6, 0000 % x
    JAL	    ~Func:pause_draw_menu_label
    ADDI	A2, FP, 0060 % y
}

% BP icon pos
@Function 1390A8 % 80245D68
{
    ADDI	A1, S5, 0000 % x
    LW	    A0, 0024 (S1)
    JAL	    ~Func:set_hud_element_render_pos
    ADDI	A2, FP, 0076 % y
}


% Badge Points - strings global y offset
@Function 1390C0 % 80245D80
{
    ADDIU	S0, FP, 006F
}

% "BP" string x pos
@Function 1390D0 % 80245D90
{
    ADDI	A1, S4, 0000
}

% Max BP string x pos
@Function 1390EC % 80245DAC
{
    ADDI	A1, S3, 0000
}
%====================
% Boots & Hammer
%====================
% Boots & Hammer - labels - global x offset
@Function 139500 % 802461C0
{
    ADDIU	S0, T0, 0016
}

% Boots label - y pos
@Function 1394FC % 802461BC
{
    ADDIU	A2, FP, 0021
}

% Hammer label - y pos
@Function 139518 % 802461D8
{
    ADDIU	A2, FP, 003F
}

% Boots & Hammer - icons - global x offset
@Function 139548 % 80246208
{
    ADDIU	S1, T0, 0017
}

% Boots icon - y pos
@Function 13953C % 802461FC
{
    ADDIU	A2, FP, 0035
}

% Hammer icon - y pos
@Function 1395C0 % 80246280
{
    ADDIU	A2, FP, 0053
}

% Boots & Hammer - strings - global x offset
@Function 13958C % 8024624C
{
    ADDIU	S2, T0, 0020
}

% Boots string - y pos
@Function 139578 % 80246238
{
    ADDIU	A2, FP, 002F
}

% Hammer string - y pos
@Function 1395E8 % 802462A8
{
    ADDIU	A2, FP, 004D
}
%====================
% Star Power
%====================

% Change the entire star power stuff Y pos
@Hook 1395FC % 802462BC
{
    % The menu is doing the flipping animation?
    LABU    A0, 8015A14C % Stats Tab animation timer / >5 animation ended
    SLTIU   T0, A0, 6
    BNEL    T0, R0, .End
    ADDI	FP, R0, FFF0 % y offset
    % Menu is static
    ADDI	FP, R0, 0014 % y offset
    % restore vanilla code
    .End
    ADDIU	A0, R0, 0006
    J       802462C4
    LW	    T0, 0084 (SP)
}

%====================
% Shine Sprites
%====================

% Add the Shine Sprites to the Pause Menu
@Hook 138ED8 % 80245B98
{
    PUSH    R0, R0, R0, RA, A0, A1, A2, A3, V0, V1, T0
    % Draw Icon
    LAW     A0, $Data_BeltsIcons_FirstIndex
    ADDIU   A0, A0, 6 % get Shine iconIndex
    ADDI    A1, S3, FF96 % x
    JAL	    ~Func:set_hud_element_render_pos
    ADDI    A2, S5, F % y
    % Change Size
    LAW     A0, $Data_BeltsIcons_FirstIndex
    ADDIU   A0, A0, 6 % get Shine iconIndex
    LIO     A1, 41900000 % 18.0 % Width
    LIO     A2, 41900000 % 18.0 % Lenght
    JAL     $SetIconSize
    RESERVED
    LAW     A0, $Data_BeltsIcons_FirstIndex
    JAL	    ~Func:draw_hud_element_1
    ADDIU   A0, A0, 6 % get Shine iconIndex
    % Draw "S. Sprites"
    LIO     A0 $String_Shine
    LW	    A1, 0054 (SP)
    ADDI	A1, S4, FF83 % x
    ADDI    A2, S0, 0057 % y
    ADDIU	T0, R0, 000A % color
    SW	    T0, 0010 (SP)
    ADDIU	T0, R0, 0001 % string fx
    SW	    T0, 0014 (SP)
    JAL     ~Func:draw_string
    ADDIU	A3, R0, 00FF % opacity
    % Draw S. Sprites amount
    ADDI    A1, S4, 0 % x
    ADDI    A2, S0, 0057 % y
    ADDIU	A3, R0, 1 % bool (?)
    LABU    A0, 8010F2A8 % load amount
    ADDIU	T0, R0, 000A % color
    SW	    T0, 0010 (SP)
    ADDIU	T0, R0, 00FF % opacity
    SW	    T0, 0014 (SP)
    JAL	    ~Func:draw_number
    SW	    S2, 0018 (SP) % string fx
    % Draw "x"
    ADDI    A1, S3, 0 % x
    LW	    A0, 002C (S1) % load x icon index
    JAL	    ~Func:set_hud_element_render_pos
    ADDI    A2, S5, 10 % y
    JAL	    ~Func:draw_hud_element_2
    LW	    A0, 002C (S1) % load x icon index
    .End
    POP     R0, R0, R0, RA, A0, A1, A2, A3, V0, V1, T0
    % restore vanilla code
    CLEAR   A0
    J       80245BA0
    LW	    T0, 0084 (SP)
}

#string $String_Shine
{
S. Sprites[End]
}

% The icon is created and freed in BadgeTab.patch - Hook 1419C8
#new:Data $IconScript_Shine_Pause
{
00000008
00000007 % "SetIconSize"
00000003 00000004
00000002 0000003C $Icon_ShineSprite_Pause $Palette_ShineSprite_Pause
00000000 00000000 00000003 00000000
}

#new:Data $IconScript_Shine
{
00000008
00000007 % "SetIconSize"
00000003 00000004
00000002 0000003C $Icon_ShineSprite $Palette_ShineSprite
00000000 00000000 00000003 00000000
}

#new:Data $Icon_ShineSprite % original icon
{ ~RasterFile:CI-4:pause_menu/ssprite_0.png }

#new:Data $Palette_ShineSprite
{ ~PaletteFile:CI-4:pause_menu/ssprite_0.png }

#new:Data $Icon_ShineSprite_Pause % doesn't have borders
{ ~RasterFile:CI-4:pause_menu/ssprite_2.png }

#new:Data $Palette_ShineSprite_Pause
{ ~PaletteFile:CI-4:pause_menu/ssprite_2.png }

#export $IconScript_Shine
#export $IconScript_Shine_Pause

%==========================
% Patch the cursor positions according to the new stats tab
%==========================

% Pause Menu - Stats tab - Cursor data
#new:Data $StatsMenu_CursorTableData % 1426F0 : 8024F3B0 <--- originally placed here
{
    00000009 00000024 00000021 % Pos#1 - PosX PosY StringID
    00000008 00000044 00000025 % Pos#2
    00000008 00000062 00000029 % Pos#3
    00000011 00000084 00000024 % ...
    0000007E 00000031 00000022
    000000C8 00000031 00000023
    00000084 0000004C 0000002C
    0000007D 0000005B 0000002D
    0000007D 0000006A 0000002E
    0000007D 00000079 0000002F % ...
    0000007D 0000008A 00000000 % Pos#11 - Shine Sprites
    0000007D 00000099 00000031 % Pos#12 - Total Time (new pos!)
}

% Use $StatsMenu_CursorTableData to get the cursor data
% instead of the original table in 8024F3B0
@Function 139DA4 % 80246A64
{
    LIO A1, $StatsMenu_CursorTableData
}


%====================
% Addresses Notes:

% 8024F4AF = Cursor pos index
% 80246F28 - Read cursor pos to get the stringID
% 80246A6C - Read the cursor pos index to know the cursor coordinates

% 802700C8 = Pause Menu - StringID for description box

% 8024F3B0 - Stats tab - Cursor x and y positions for each pos index, each pos uses 3 words and it goes like this:
% PosX PosY StringID

% 80074035 - Joystick 1 frame inputs
% bit0=Up
% bit1=Down
% bit2=Left
% bit3=Right
%====================

% Make possible for the cursor to move further
@Data 1427F0 % 8024F4B0
{
    00030800 % was 00000207
    % 2nd byte = rows cap
    % 3rd byte = columns cap
}

% Patch ~Func:pause_stats_handle_input
%
% This hook handle all the inputs inside the Stats tab
%
% I just didn't want to bother to decipher all the function
% to add support for the new reorganized stats tab, so I just
% made an entire new tracking code instead.
@Hook:Pause 139EB4 % 80246B74
{
    PUSH    RA, A0, A1, A2, A3, V0, V1, T0, T1, T2
    % Track Joystick
    LABU    T0, 80074035 % Joystick one time inputs
    LIO     T2, 8024F4AC % Cursor pos data
    ANDI    T1, T0, 1 % bit0=Up
    BNE     T1, R0, .MoveUp
    ANDI    T1, T0, 2 % bit1=Down
    BNE     T1, R0, .MoveDown
    ANDI    T1, T0, 4 % bit2=Left
    BNE     T1, R0, .MoveLeft
    ANDI    T1, T0, 8 % bit3=Right
    BNE     T1, R0, .MoveRight
    NOP
    % The B button was pressed?
    LABU    T0, 80074036
    ANDI    T1, T0, 40 % bit6=B button
    BNE     T1, R0, .Cancel
    NOP
    BEQ     R0, R0, .SetCursorPos
    NOP
    %===============
    .MoveUp
    %===============
    LBU     V0, 1 (T2) % load cursor x pos
    LBU     V1, 2 (T2) % load cursor y pos
    COPY    A1, V1 % push original y pos
    % If the cursor is already on the highest area, just bypass
    BEQ     V1, R0, .SetCursorPos
    NOP
    % Check x pos to know which behaviour to use
    BEQL    V0, R0, .Up_SetPos
    ADDI    V1, V1, FFFE
    ORI     T0, R0, 1
    BEQL    V0, T0, .Up_SetPos
    ADDI    V1, V1, FFFF
    ORI     T0, R0, 2
    BEQ     V0, T0, .Up_SetPos
    CLEAR   V0
    % Check if the current pos are the following:
    % X=1
    % Y=1
    % Means the cursor got moved from Star Power
    .Up_SetPos
    ORI     T0, R0, 1
    BNE     V0, T0, .Up_FPCheck
    ORI     T0, R0, 1
    BEQL    V1, T0, .Up_FPCheck
    ADDI    V1, V1, FFFF % don't go from "Star Power" > "FP", go directly to HP
    .Up_FPCheck
    % If V1 is negative set back to zero
    BLTZL   V1, .NegativeY
    CLEAR   V1
    .NegativeY
    BEQ     R0, R0, .PlaySFX_MoveCursor
    SB      V1, 2 (T2) % save cursor y pos
    %===============
    .MoveLeft
    %===============
    LBU     V0, 1 (T2) % load cursor x pos
    LBU     V1, 2 (T2) % load cursor y pos
    % If the cursor is already on the far left, just bypass
    BEQ     V0, R0, .SetCursorPos
    NOP
    ADDI    V0, V0, FFFF % move to the left
    % Check if the cursor x pos is 0 and
    % the y pos is 7
    BNE     V0, R0, .Left_Check
    NOP
    ORI     T0, R0, 7
    BNE     V1, T0, .Left_Check
    NOP
    % If is the case set y back to 6
    ORI     V1, R0, 6
    SB      V1, 2 (T2) % save cursor y pos
    .Left_Check
    BEQ     R0, R0, .PlaySFX_MoveCursor
    SB      V0, 1 (T2) % save cursor x pos
    %===============
    .MoveDown
    %===============
    LBU     V0, 1 (T2) % load cursor x pos
    LBU     V1, 2 (T2) % load cursor y pos
    COPY    A1, V1 % push original y pos
    % If the cursor is already on the lowest area, just bypass
    % Check current x pos
    BNE     V0, R0, .Down_CheckX2
    NOP
    SLTI    T1, V1, 5
    BNE     T1, R0, .Down_CheckCap
    NOP
    ORI     V1, R0, 6 % lowest point
    SB      V0, 1 (T2) % x pos
    BEQ     R0, R0, .SetCursorPos
    SB      V1, 2 (T2) % y pos
    .Down_CheckX2
    ORI     T0, R0, 1
    BEQ     V0, T0, .Down_CheckCap
    ORI     T1, R0, 7 % lowest point
    .Down_CheckCap
    BEQ     V1, T1, .SetCursorPos % the cursor is already in the lowest point, just bypass
    NOP
    % Check x pos to know which behaviour to use
    BEQL    V0, R0, .Down_SetPos
    ADDI    V1, V1, 2
    ORI     T0, R0, 1
    BEQL    V0, T0, .Down_SetPos
    ADDI    V1, V1, 1
    ORI     T0, R0, 2
    BNE     V0, T0, .Down_SetPos
    NOP
    % If the cursor is in FP, set the cursor to "Star Power"
    ORI     V0, R0, 1
    SB      V0, 1 (T2) % set pos x
    ORI     V1, R0, 2 % for FP always set y as 2, so the cursor will move to "Star Power"
    .Down_SetPos
    % Check if the current pos is HP
    LBU     T0, 3 (T2) % load pos Index
    ORI     T1, R0, 4 % HP
    BEQL    T0, T1, .Down_IsHP
    ORI     V1, R0, 2 % set pos as "Star Power"
    .Down_IsHP
    BEQ     R0, R0, .PlaySFX_MoveCursor
    SB      V1, 2 (T2) % save cursor y pos
    %===============
    .MoveRight
    %===============
    LBU     V0, 1 (T2) % load cursor x pos
    LBU     V1, 2 (T2) % load cursor y pos
    % If the cursor is already far right, just bypass
    ORI     T0, R0, 2
    BEQ     V0, T0, .SetCursorPos
    NOP
    % Check if the cursor is in X=1 & Y>=2
    ORI     T0, R0, 1
    BNE     V0, T0, .Right_IsntFarRight
    NOP
    SLTI    T0, V1, 2
    BNE     T0, R0, .Right_IsntFarRight
    NOP
    BEQ     R0, R0, .SetCursorPos
    NOP
    .Right_IsntFarRight
    % Check if the cursor is in Boots with the following pos X=0 & Y=1
    BNE     V0, R0, .Right_NotBoots
    ORI     T0, R0, 1
    BNE     V1, T0, .Right_NotBoots
    NOP
    SB      R0, 2 (T2) % save cursor y pos
    % Set pos
    .Right_NotBoots
    ADDI    V0, V0, 1
    BEQ     R0, R0, .PlaySFX_MoveCursor
    SB      V0, 1 (T2) % save cursor x pos
    %==============
    .PlaySFX_MoveCursor
    JAL     ~Func:sfx_play_sound
    ORI     A0, R0, 00C7 % move cursor
    %===============
    .SetCursorPos
    %===============
    % Read the cursor x and y pos to get the pos data
    LIO     T2, 8024F4AC % Cursor pos data
    LBU     T0, 1 (T2) % cursor x pos
    LBU     T1, 2 (T2) % cursor y pos
    % Cursor x pos is 2?
    ORI     V0, R0, 2
    BNE     T0, V0, .IsntX2
    NOP
    % Current pos is "Flower Points"
    BEQ     R0, R0, .SetIndexPos
    ORI     V0, R0, 5 % FP
    .IsntX2
    % Cursor x pos is 1?
    ORI     V0, R0, 1
    BNE     T0, V0, .IsntX1
    NOP
    % Read Y pos to get the global index pos
    ORI     V0, R0, 0
    BEQ     T1, V0, .SetIndexPos
    ORI     V0, R0, 4 % HP
    ORI     V0, R0, 2
    BEQ     T1, V0, .SetIndexPos
    ORI     V0, R0, 6 % Star Energy
    ORI     V0, R0, 3
    BEQ     T1, V0, .SetIndexPos
    ORI     V0, R0, 7 % Star Points
    ORI     V0, R0, 4
    BEQ     T1, V0, .SetIndexPos
    ORI     V0, R0, 8 % Coins
    ORI     V0, R0, 5
    BEQ     T1, V0, .SetIndexPos
    ORI     V0, R0, 9 % Star Pieces
    ORI     V0, R0, 6
    BEQ     T1, V0, .SetIndexPos
    ORI     V0, R0, A % Shine Sprites
    ORI     V0, R0, 7
    BEQ     T1, V0, .SetIndexPos
    ORI     V0, R0, B % Time
    .IsntX1
    % Read Y pos to get the global index pos
    ORI     V0, R0, 0
    BEQ     T1, V0, .SetIndexPos
    ORI     V0, R0, 0 % Mario
    SLTIU   V0, T1, 3
    BNE     V0, R0, .SetIndexPos
    ORI     V0, R0, 1 % Boots
    SLTIU   V0, T1, 5
    BNE     V0, R0, .SetIndexPos
    ORI     V0, R0, 2 % Hammer
    SLTIU   V0, T1, 7
    BNE     V0, R0, .SetIndexPos
    ORI     V0, R0, 3 % BP
    .SetIndexPos
    SB      V0, 3 (T2) % save global cursor pos
    % Get string ID according to the cursor pos
    % V0 = current pos
    LIO     T0, $StatsMenu_CursorTableData % Stats menu cursor data
    % get offset
    ORI     T1, R0, C
    MULT    V0, T1
    MFLO    T1
    ADDU    T0, T0, T1
    % Current pos is shine sprite?
    LIO     A0, $String_Sprites_Desc
    ORI     V1, R0, A % sprites' pos
    BEQL    V0, V1, .SetString
    COPY    V0, A0
    LBU     A0, B (T0) % Cursor Data(0x0B) = stringID
    % Current pos is Boots?
    ORI     V1, R0, 1 % boots pos
    BNE     V0, V1, .CheckHammer
    NOP
    LAB     T0, 8010F290 % load boots
    BEQ     R0, R0, .GetMenuString
    ADD     A0, A0, T0
    .CheckHammer
    ORI     V1, R0, 2 % hammer pos
    BNE     V0, V1, .GetMenuString
    NOP
    LAB     T0, 8010F291 % load hammer
    ADD     A0, A0, T0
    .GetMenuString
    JAL     ~Func:pause_get_menu_string
    NOP
    % set stringID
    .SetString
    SAW     V0, 802700C8 % pause menu - current stringID
    BEQ     R0, R0, .End
    RESERVED
    .Cancel
    % play sfx
    JAL     ~Func:sfx_play_sound
    ORI     A0, R0, 00CA % cancel
    SAB     R0, 802700D4
    .End
    POP     RA, A0, A1, A2, A3, V0, V1, T0, T1, T2
    JR      RA
    NOP
}

#string $String_Sprites_Desc
{
Shine Sprites Mario has found.[BR]
Three can level up an ally.[END]
}

% Shine Sprite Block - Overworld Script
%
% The entity need to be the last one spawned, to being able
% to disappear the shine inside the block.
%
% var0 = EntityID
%
% var1 = GlobalFlag
#export:Script $Script_ShineBlock
{
    Set *Var7 *Var0
    Set *Var8 *Var1
    Call GetValueByRef ( *Var8 *Var1 )
    % Check if flag is true
    If *Var1 == .True
        Return
    EndIf
    Call    IsStartingConversation ( *Var0 )
    If  *Var0  ==  .True
        Return
    EndIf
    Call    $ReadAddress ( 8010EBB0 0 *Var0 .False .False )
    If  *Var0  ==  1 % If player is using a partner
        Return
    EndIf
    SetGroup 0
    SuspendAll 2
    % init
    Call     ModifyGlobalOverrideFlags ( .True 00200000 )
    Call     DisablePlayerInput 	( .True )
    Call     DisablePartnerAI 	( 0 )
    % main
    Call    SetTimeFreezeMode  ( 2 )
    Call    $Function_ShineBlock_HideContent ( *Var7 )
    Call    ShowGotItem 	( .Item:ShineSprite .True 00000000 )
    Call    $ReadAddress ( 8010F2A8 0 *Var0 .False .False ) % load shines
    If *Var0 != FF
        Add *Var0 1
    EndIf
    Call     $WriteAddress ( 8010F2A8 0 *Var0 .False .False ) % save shines
    Call     SetTimeFreezeMode  ( 0 )
    % end
    Call     SetValueByRef ( *Var8 .True )
    Call     DisablePlayerInput 	( .False )
    Call     EnablePartnerAI
    Call     ModifyGlobalOverrideFlags ( .False 00200000 )
    Call     $ModifyGlobalOverrideFlags_NukeSomeFlags
    ResumeAll 2
    Return
    End
}

#new:Function $Function_ShineBlock_HideContent
{
    0:  ADDIU     SP, SP, FFE8
    4:  SW        RA, 10 (SP)
    8:  LW        V0, C (A0)
    C:  JAL       ~Func:get_variable
   10:  LW        A1, 0 (V0)
   14:  JAL       ~Func:entity_upgrade_block_hide_content
   18:  COPY      A0, V0
   1C:  LW        RA, 10 (SP)
   20:  LI        V0, 2
   24:  JR        RA
   28:  ADDIU     SP, SP, 18
}

% Call  $Function_GetEntityByAddress_WorldEntitiesTable ( entityAddress *out )
%
% Read an entity address and get in which address is that entity
%
% in the entities table.
#new:Function $Function_GetEntityByAddress_WorldEntitiesTable
{
    PUSH    RA, A0, A1, A2, A3, V1, S0
    COPY    S0, A0
    LW      A1, C (A0)
    JAL     ~Func:get_variable
    LW      A1, 0 (A1)
    LIO     A1, 80151380 % WorldEntities
    CLEAR   A2
    .Loop
    LW      A3, 0 (A1)
    BEQL    V0, A3, .SaveAddress
    COPY    A2, A1
    ADDIU   A2, A2, 1
    SLTIU   A3, A2, 29` % because there can only be 30 entities
    BNE     A3, R0, .Loop
    ADDIU   A1, A1, 4
    BEQ     R0, R0, .End
    NOP
    .SaveAddress
    COPY    A0, S0
    LW      A1, C (A0)
    JAL     ~Func:set_variable
    LW      A1, 4 (A1)
    .End
    POP     RA, A0, A1, A2, A3, V1, S0
    ORI     V0, R0, 2
}

#new:Function $ModifyGlobalOverrideFlags_NukeSomeFlags
{
    0:  LIA			V0, 8009A650
    8:  LW			V1, 0 (V0)
    C:  ADDIU		A0, R0, FFBF
   10:  AND			V1, V1, A0
   14:  SW			V1, 0 (V0)
   18:  JR			RA
   1C:  ADDIU		V0, R0, 2
}

% Change the icon inside the super block
@Data E4A6A0 % The pointer with this data will be placed in SuperBlock_SubEntityData(0x44)
{
    ~RasterFile:CI-4:pause_menu/ssprite_1.png
}

% Each palette uses 1F bytes, each word is a color

@Data E4A8A0
{
    ~PaletteFile:CI-4:pause_menu/ssprite_1.png
}

@Data E4A8C0
{
    ~PaletteFile:CI-4:pause_menu/ssprite_1.png
}

@Data E4A8E0
{
    ~PaletteFile:CI-4:pause_menu/ssprite_1.png
}

@Data E4A900
{
    ~PaletteFile:CI-4:pause_menu/ssprite_1.png
}

%===========================
% Shine Sprites Counter
%
% Code reused from Black Pit (is the bank account code)
%===========================

#new:Data $icon_posY
{ 00000000 }

#new:Data $text_posY
{ 00000000 }

#new:Data $box_sizeX
{ 00000000 }

#new:Data $icon_opacity
{ 00000000 }

#new:Data $text_opacity
{ 00000000 }

#export:Data $BoxAnimation_Offset % Handle the offsets when the box is in an animation
{ 00000000 }

#export:Data $BoxAnimation_State % Handle when to do the Start and Ending animations for the box
{ 00000000 }

#export:Data $ShowShrinesCounter
{ 00000000 }

#export:Function $Draw_ShinesCounter
{
PUSH	RA, A0, A1, A2, A3, T0, T1, V0, S0
LAW     V0, $ShowShrinesCounter
BEQ     V0, R0, .End
NOP
LAW     A1, $BoxAnimation_State
COPY    S0, A1
ADDIU   T0, R0, 1
BEQ     A1, T0, .OffsetsEnd    % It means the start animation has ended, keep the box in the same size
NOP
% Handle the speed of the offsets
CLEAR	A2
LIA		A0, $Script_HandleSpeed
JAL		~Func:start_script
ADDIU	A1, R0, 1 % This line looks like is unneccesary
% Use the branches to make the offsets accordingly to the current animation
LAW     A1, $BoxAnimation_Offset
BNE     A1, R0, .CheckOffset2 % If current offset isn't the first 1
NOP
% Check if the current state is 2 - It means the ending animation has ended, so set the state to 0
% to start the start animation the next time you talk to fishmael
LAW     T0, $BoxAnimation_State
COPY    S0, T0
ADDIU   T1, R0, 2
BNE     T0, T1, .LoadOffset1
NOP
SAW     R0, $ShowShrinesCounter % Set the flag to 0
SAW     R0, $BoxAnimation_State
% If isn't state 2, just load the box
.LoadOffset1
SAW     R0, $box_sizeX
BEQ     R0, R0, .LoadBox
NOP
.CheckOffset2
ADDIU   T0, R0, 1
BNE     A1, T0, .CheckOffset3
NOP
ORI     A2, R0, 8
MULT    A2, A1
MFLO    A2
SAW     A2, $box_sizeX
BEQ     R0, R0, .LoadBox
RESERVED
.CheckOffset3
ADDIU   T0, R0, 2
BNE     A1, T0, .CheckOffset4
NOP
ORI     A2, R0, 8
MULT    A2, A1
MFLO    A2
SAW     A2, $box_sizeX
BEQ     R0, R0, .LoadBox
RESERVED
.CheckOffset4
ADDIU   T0, R0, 3
BNE     A1, T0, .CheckOffset5
NOP
ORI     A2, R0, 8
MULT    A2, A1
MFLO    A2
SAW     A2, $box_sizeX
BEQ     R0, R0, .LoadBox
RESERVED
.CheckOffset5
ADDIU   T0, R0, 4
BNE     A1, T0, .CheckOffset6
NOP
ORI     A2, R0, 8
MULT    A2, A1
MFLO    A2
SAW     A2, $box_sizeX
BEQ     R0, R0, .LoadBox
RESERVED
.CheckOffset6
ADDIU   T0, R0, 5
BNE     A1, T0, .CheckOffset7
NOP
%% Offset 6 is when the text and the coin appears
ADDIU   T0, R0, 0
SAW     T0, $icon_posY
ADDIU   T0, R0, 0
SAW     T0, $text_posY
ADDIU   T0, R0, 0
SAW     T0, $icon_opacity
ADDIU   T0, R0, 0
SAW     T0, $text_opacity
ORI     A2, R0, 8
MULT    A2, A1
MFLO    A2
SAW     A2, $box_sizeX
BEQ     R0, R0, .LoadBox
RESERVED
.CheckOffset7
ADDIU   T0, R0, 6
BNE     A1, T0, .CheckOffset8
NOP
%% Check Position to use for the String and the Coin
ADDIU   T0, R0, 144`
SAW     T0, $icon_posY
ADDIU   T0, R0, 154`
SAW     T0, $text_posY
ADDIU   T0, R0, 55
SAW     T0, $icon_opacity
ADDIU   T0, R0, 54
SAW     T0, $text_opacity
ORI     A2, R0, 8
MULT    A2, A1
MFLO    A2
SAW     A2, $box_sizeX
BEQ     R0, R0, .LoadBox
RESERVED
.CheckOffset8
ADDIU   T0, R0, 7
BNE     A1, T0, .OffsetsEnd
NOP
%% Check Position to use for the String and the Coin
ADDIU   T0, R0, 146`
SAW     T0, $icon_posY
ADDIU   T0, R0, 156`
SAW     T0, $text_posY
ADDIU   T0, R0, AA
SAW     T0, $icon_opacity
ADDIU   T0, R0, A8
ADDIU   A2, R0, 70`
SAW     A2, $box_sizeX
BEQ     R0, R0, .LoadBox
RESERVED
.OffsetsEnd
ADDIU   T0, R0, 148`
SAW     T0, $icon_posY
ADDIU   T0, R0, 158`
SAW     T0, $text_posY
ADDIU   T0, R0, FF
SAW     T0, $icon_opacity
ADDIU   T0, R0, FE
SAW     T0, $text_opacity
ADDIU   A2, R0, 70` % End - The box has his largest size
ADDIU   T0, R0, 1
SAW     T0, $BoxAnimation_State % Put the box to State 1 (It means the start animation has ended)
.LoadBox
% Draw Box
ADDIU	A0, R0, 20  % posX
ADDIU	A1, R0, 98  % posY
LAW     A2, $box_sizeX
ADDIU	A3, R0, 1A % sizeY
ADDIU	T0, R0, 3  % style
ADDIU	T1, R0, FF % opacity
JAL		$DrawBox
NOP
% Draw String
LABU    A0, 8010F2A8 % shine sprites
JAL     ~Func:set_message_value
ADDIU   A1, R0, 0    % Var Index (00-02)
%% Check Position X pos to use for the String
ADDIU   A1, R0, 65` % x
LIO     A0, $String_CurrentShines
LAW     A2, $text_posY    % y
LAW     A3, $text_opacity % opacity
SW      R0, 0014 (SP) % text fx / 0 = none
JAL     ~Func:draw_string
NOP
% Draw Coin Icon
%% Check Position X pos to use for the Coin
ADDIU   A1, R0, 20 % x
LIO     A0, $String_ShineIcon
LAW     A2, $icon_posY    % y
LAW     A3, $icon_opacity % opacity
SW      R0, 0014 (SP) % text fx / 0 = none
JAL     ~Func:draw_string
NOP
.End
POP		RA, A0, A1, A2, A3, T0, T1, V0, S0
JR		RA
NOP
}

#string $String_CurrentShines
{
[SaveColor][Color:0A]x [Var 0][RestoreColor][End]
}

#string $String_ShineIcon
{
[ItemIcon itemID=0x28][End]
}

#new:Script $Script_HandleSpeed
{
    Call $ReadAddress ( $BoxAnimation_State 2 *Var0 .False .False )
    Call $ReadAddress ( $BoxAnimation_Offset 2 *Var1 .False .False )
    Switch *Var0
        Case == 0 % Start Animation
            If  *Var1 < 8 % The box isn't fully deployed
                Add     *Var1 1
                Call    $WriteAddress ( $BoxAnimation_Offset 2 *Var1 .False .False )
                Wait    3
            EndIf
        Case == 1 % Idle
        Case == 2 % Ending Animation
            If  *Var1 > 0 % The box isn't fully invisible
                Sub     *Var1 1
                Call    $WriteAddress ( $BoxAnimation_Offset 2 *Var1 .False .False )
                Wait    3
            EndIf
    EndSwitch
    Return
    End
}
