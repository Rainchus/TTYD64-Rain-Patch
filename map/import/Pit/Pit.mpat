% This file includes the code for each floor in the pit

#new:Header $Header
{
	[MainScript] $Script_Main
	[Background] 00000000
	[EntryList] $EntryList
	[EntryCount] 2
    [MapTattle]  $Function_GetTattle_Pit
}

#new:EntryList $EntryList
{
	~Vec4f:pit_01:Entry0
	~Vec4f:pit_01:Entry1
}

#new:Function_Init $Function_Init
{
	PUSH    RA
	LIA     A0, 800B0CF0
	LIA     A1, "tik_tex"
	JAL     800654F0 % sprintf
	RESERVED
    % override collision
    LIA     A0, 800D91E0
    LIA     A1, "pit_01_hit"
    JAL     ~Func:sprintf
    RESERVED
    % override geometry
    LIA     A0, 800D9230
    LIA     A1, "pit_01_shape"
    JAL     ~Func:sprintf
    RESERVED
	CLEAR  V0
	JPOP   RA
}

#new:Script_Main $Script_Main
{
	Set   *GB_WorldLocation  .Location:ToadTownTunnels
	Call  SetCamPerspective  ( .Cam:Default 00000003 00000019 00000010 00001000 )
	Call  SetCamBGColor      ( .Cam:Default 00000000 00000000 00000000 )
	Call  SetCamEnabled      ( .Cam:Default .True )
	Call  SetCamLeadPlayer   ( .Cam:Default .False )
	Call  ClearDefeatedEnemies
    % Spawn a mover?
    Call  RandInt ( 100` *Var0 )
	If *AreaByte[0] > 95` % don't spawn in the last 5 floors
		Set *Var0 0
	EndIf
    If *Var0 >= 95` % 5% to spawn mover
        Set   *MapVar[0] .True
		Call  MakeNpcs ( .False $NpcGroupList_Mover )
	Else
		ExecWait $Script_SpawnNpcs_Init
		ExecWait $Script_UpdateNpcSpawnPos
    EndIf
	Exec  $Script_MakeEntities
	Exec  $Script_SetupMusic
	Exec  $Script_SetupTexturePan
	Exec  $Script_EnterMap
	Set	  *Flag_LockInputs_GiantChest .False
	Wait  5
	Return
	End
}

#new:Script $Script_MakeEntities
{
	Set	  *GF_PIT_BluePipe .False
	Call  MakeEntity    ( .Entity:BlueWarpPipe ~Vec4d:pit_01:Entity_BluePipe .False .False ~Index:*GF_PIT_BluePipe 80000000 )
	Call  MakeEntity    ( .Entity:Signpost ~Vec4d:pit_01:Entity_Sign 80000000 )
	Call  AssignScript    ( $Script_ReadSign_Entity_Sign )
    If *MapVar[0] == .True
        Call    MakeEntity  	( .Entity:BlueSwitch ~Vec4d:pit_01:Entity_Switch 80000000 )
        Call    AssignScript 	( $Script_ShowPipe )
    EndIf
	Return
	End
}

#new:Script $Script_UpdateNpcSpawnPos
{
	% x
	Call	RandInt ( 00000001 *Var0 )
	If *Var0 == .False
		Call	RandInt ( 177` *Var0 )
		Mul		*Var0 -1
	Else
		Call	RandInt ( 192` *Var0 )
	EndIf
	% z
	Call	RandInt ( 00000001 *Var2 )
	If *Var2 == .False
		Call	RandInt ( 26` *Var2 )
		Mul		*Var2 -1
		Add 	*Var2 -132`
	Else
		Call	RandInt ( 68` *Var2 )
	EndIf
	% update npc pos
	Call	$GetEnemyPointer ( 00000000 *Var6 )
	Call 	$ReadAddress ( *Var6 2 *Var6 D0 .False ) % get movement data
	Call	GetNpcPos ( 00000000 *Var3 *Var4 *Var5 )
	Add 	*Var3 *Var0 % x
	Add 	*Var5 *Var2 % z
	Call	SetNpcPos ( 00000000 *Var3 *Var4 *Var5 )
	% update detection volume
	Call 	$WriteAddress ( *Var6 2 *Var3 0 .False ) % x
	Call 	$WriteAddress ( *Var6 2 *Var5 8 .False ) % z
	% update wandering volume
	Call 	$WriteAddress ( *Var6 2 *Var3 1C .False ) % x
	Call 	$WriteAddress ( *Var6 2 *Var5 24 .False ) % z
	Switch *AreaByte[0]
		% Monty Mole
		CaseOR == 12`
		CaseOR == 17`
			% update hole pos too
			Call	$GetEnemyPointer ( 00000001 *Var6 )
			Call 	$ReadAddress ( *Var6 2 *Var6 D0 .False ) % get movement data
			Call	SetNpcPos ( 00000001 *Var3 *Var4 *Var5 )
			% update detection volume
			Call 	$WriteAddress ( *Var6 2 *Var3 0 .False ) % x
			Call 	$WriteAddress ( *Var6 2 *Var5 8 .False ) % z
			% update wandering volume
			Call 	$WriteAddress ( *Var6 2 *Var3 1C .False ) % x
			Call 	$WriteAddress ( *Var6 2 *Var5 24 .False ) % z
		EndCaseGroup
	EndSwitch
	Return
	End
}

#new:Script $Script_ShowPipe
{
    Call    DisablePlayerInput ( .True )
    Call 	PlaySound ( 208E )
    Call    MakeLerp ( -40` 0 25` .Easing:Linear )
    Loop
        Call    UpdateLerp
        Call    TranslateGroup ( ~Model:pit_01:pipe 0 *Var0 .Easing:CosInOut )
        Call    UpdateColliderTransform ( ~Collider:pit_01:pipe )
        Call    UpdateColliderTransform ( ~Collider:pit_01:Exit0 )
        Wait    1
        If *Var1 == .False
            BreakLoop
        EndIf
    EndLoop
    Call    DisablePlayerInput ( .False )
    Return
    End
}

#new:Script $Script_SetupMusic
{
	Call  SetMusicTrack ( 00000000 .Song:ToadTownTunnels 00000000 00000008 )
	Call  ClearAmbientSounds ( 250` )
	Return
	End
}

#new:Script $Script_EnterMap
{
	Set     *VarA ~Entry:pit_01:Entry0
 	Set     *VarB ~Collider:pit_01:topPipe
	Set		*VarC $Script_CreateExitTriggers
	Exec    $Script_EnterTopPipe
    % Hide pipe
    Call    ParentColliderToModel ( ~Collider:pit_01:Exit0 ~Model:pit_01:pipe )
    Call    ParentColliderToModel ( ~Collider:pit_01:pipe ~Model:pit_01:pipe )
    Call    TranslateModel ( ~Model:pit_01:pipe 0 -40` 0 )
    Call    UpdateColliderTransform ( ~Collider:pit_01:Exit0 )
    Call    UpdateColliderTransform ( ~Collider:pit_01:pipe )
    %
	Exec 	$Script_UpdateFloorTheme
	Return
	End
}

#new:Script $Script_UpdateFloorTheme
{
    Call    EnableGroup ( ~Model:pit_01:themes .False )
    Switch *AreaByte[0]
        Case >= 80`
            Call    EnableGroup ( ~Model:pit_01:theme3 .True )
        Case >= 50`
            Call    EnableGroup ( ~Model:pit_01:theme2 .True )
        Default
            Call    EnableGroup ( ~Model:pit_01:theme1 .True )
    EndSwitch
	Return
	End
}

% var0 = NpcsData
#new:Script $Script_SpawnNpcs
{
	% get next NPC to spawn
	Set		*Var2 *AreaByte[0]
	Set		*Var1 *Var2
	Div		*Var2 10`
	Mul		*Var2 10`
	Sub		*Var1 *Var2 % remove decimals
	If *Var1 > 5
		Sub *Var1 5
	EndIf
	Sub 	*Var1 1
	Set		*Var4 *Var1
	Set 	*Var2 8
	Mul 	*Var2 *Var1
	Add 	*Var0 *Var2
	Call 	$ReadAddress ( *Var0 2 *Var1 0 .False )
	Call 	$ReadAddress ( *Var0 2 *Var2 4 .False )
	If *Var1 < .False
		% Check if first data was a pointer (neccesary for the Lakitu floors, because you need to spawn more than 1 Npc)
		Set 	*VarA *Var1
	Else
		Set 	*VarA $NpcGroupList_pit
		Call 	$WriteAddress ( *VarA 2 *Var1 0 .False ) % amount of NPCs
		Call 	$WriteAddress ( *VarA 2 *Var2 4 .False ) % npc data
	EndIf
	% get battle section
	Set		*Var2 *AreaByte[0]
	Div		*Var2 10` % because each 10 floors use a different battle section
	Set		*Var1 30 % 30 Area Pit
	Add		*Var1 *Var2
	Call 	$WriteAddress ( *VarA 0 *Var1 8 .False ) % battle section
	% get battleID
	Set		*Var1 3 % because each floor has 3 different formations
	Mul		*Var1 *Var4
	Call	RandInt ( 100` *Var2 )
	Switch *Var2
		Case < 20` % 20%
			Set *Var3 2
		Case < 65` % 45%
			Set *Var3 1
		Case < 101` % 35%
			Set *Var3 0		
	EndSwitch
	Add		*Var1 *Var3
	Call 	$WriteAddress ( *VarA 0 *Var1 9 .False ) % battleID
    Call	MakeNpcs ( .False *VarA )
	Exec	$Script_InitEnemyNPC
    Return
    End
}

#new:NpcGroupList $NpcGroupList_pit
{
	00000001 00000000 30000000
	00000000 00000000 00000000
}

#new:Script $Script_InitEnemyNPC
{
	Switch *AreaByte[0]
		% Stone Chomp
		CaseOR == 23`
		CaseOR == 28`
			% Do nothing
		EndCaseGroup
		Default
			Call	BindNpcDefeat ( 00000000 $Script_TrackOutcome )
	EndSwitch
	Return
	End
}

#new:Script $Script_TrackOutcome
{
	Call     GetBattleOutcome 	( *Var0 )
	If *Var0 ==  .Outcome:PlayerWon % 0
		Thread
			Wait 	10`
			Exec 	$Script_ShowPipe
		EndThread
		Call DoNpcDefeat
	EndIf
	Return
	End
}

%

#new:Script $Script_CreateExitTriggers
{
    Bind  $Script_Exit0 .Trigger:FloorTouch ~Collider:pit_01:Exit0 00000001 00000000
	Return
	End
}

#new:Script $Script_Exit0
{
	SetGroup 0000001B
	Set   *Var[A] ~Entry:pit_01:Entry1
	Set   *Var[B] ~Collider:pit_01:Exit0
	Set   *Var[C] $Script_GotoMap_Exit0
	ExecWait  $Script_ExitVerticalPipe
	Return
	End
}

#new:Script $Script_GotoMap_Exit0
{
    Set   *Var0 *AreaByte[0]
    Add   *Var0 1
    ExecWait $Script_GoToNextMap
	Return
	End
}

% Var0 = next floor ID
#new:Script $Script_GoToNextMap
{
    Set *Var5 *Var0
    If *Var0 >= 100`
        Call  GotoMap   ( "pit_12" 00000000 )
    Else
		% Check if is time to go the chest floor
		Call  $Function_GetReminderFromDiv ( *Var5 10` *Var1 )
		If *Var1 == 0 % The reminder is zero
			% go to the chest floor write a 1 in both digits (pit_11)
			Call  $WriteAddress ( $ASCII_NextFloor 0 31 4 .False )
			Call  $WriteAddress ( $ASCII_NextFloor 0 31 5 .False )
		Else
			% Isn't a chest floor
			Set	  *Var1 *Var0
			Div	  *Var1 10`
			Set   *Var0 31 % 30-39(ASCII) = 00-09(Actual Value)
			If *Var1 != 9` % 90s, because the 90s is "pit_10"
				Add   *Var0 *Var1
				Call  $WriteAddress ( $ASCII_NextFloor 0 *Var0 5 .False ) % 2nd digit
			Else
				Call  $WriteAddress ( $ASCII_NextFloor 0 *Var0 4 .False ) % 1st digit
			EndIf
		EndIf
        Call  GotoMap   ( $ASCII_NextFloor 00000000 )
    EndIf
    Set   *AreaByte[0] *Var5
    Wait  100`
    Return
    End
}

% Call  $Function_GetReminderFromDiv ( amount div *out_reminder )
#new:Function $Function_GetReminderFromDiv
{
	PUSH	RA, A0, A1, A2, A3, V1, S0, S1
	COPY	S0, A0
	LW		A1, C (A0)
	JAL		~Func:get_variable
	LW		A1, 0 (A1)
	COPY	S1, V0
	COPY	S0, A0
	LW		A1, C (A0)
	JAL		~Func:get_variable
	LW		A1, 4 (A1)
	DIV		S1, V0
	COPY	A0, S0
	LW		A1, C (A0)
	LW		A1, 8 (A1)
	JAL		~Func:set_variable
	MFHI	A2
	POP		RA, A0, A1, A2, A3, V1, S0, S1
	JR		RA
	ORI		V0, R0, 2
}

% Call  $Function_GetDigit ( address left/right(bool) *out )
%
% Only works for 1 byte long values
#new:Function $Function_GetDigit % unused
{
    PUSH    RA, A0, A1, A2, A3, S0, S1
    COPY    S0, A0
    % get arg1
    LW    	A1, C (A0)
    JAL     ~Func:get_variable
    LW      A1, 0 (A1)
    COPY    S1, V0
    % get arg2
    COPY    A0, S0
    LW    	A1, C (A0)
    JAL     ~Func:get_variable
    LW      A1, 4 (A1)
    % get digit in specific
    BNE     V0, R0, .Right
    NOP
    % left
    SLL     S1, S1, 24`
    SRL     S1, S1, 28`
    BEQ     R0, R0, .Save
    NOP
    .Right
    LIO     A0, 0000000F
    AND     S1, S1, A0
    .Save
    COPY    A0, S0
    COPY  	A2, S1
    LW      A1, C (A0)
    JAL     ~Func:set_variable
    LW      A1, 8 (A1)
    POP     RA, A0, A1, A2, A3, S0, S1
    JR      RA
    ORI     V0, R0, 2
}

#new:ASCII $ASCII_NextFloor
{
    "pit_00"
}

#new:Script $Script_ReadSign_Entity_Sign
{
	Call  DisablePlayerInput        ( .True )
    Call  SetMessageValue ( *AreaByte[0] 00000000 )
	Call  ShowMessageAtScreenPos    ( $String_ReadSign_Entity_Sign 000000A0 00000028 )
	Call  DisablePlayerInput        ( .False )
	Return
	End
}

#new:String $String_ReadSign_Entity_Sign
{
	[DelayOff][STYLE:SIGN]
	[CenterX:FF]
	[Down:10]Floor [Var 0]
	[DelayOn][WAIT][END]
}

% Panners

#new:Script $Script_SetupTexturePan
{
	Call     802C9000 	( ~Model:pit_01:mizu1 1 )
	Call     802C9000 	( ~Model:pit_01:mizu2 1 )
	Thread
		Set  *Var[0] 0
		Set  *Var[1] 32
		Set  *Var[2] C8
		Set  *Var[3] 6E
		Set  *Var[4] 1F4
		Set  *Var[5] 1
		Set  *Var[6] 1
		Set  *Var[7] 1
		Set  *Var[8] 1
		Set  *Var[9] 0
		Set  *Var[A] 0
		Set  *Var[B] 0
		Set  *Var[C] 0
		Exec $Script_TexturePan_Update
	EndThread
	Thread
		Set  *Var[0] 1
		Set  *Var[1] 0
		Set  *Var[2] FFFFFF38
		Set  *Var[3] FFFFFF9C
		Set  *Var[4] FFFFFE0C
		Set  *Var[5] 1
		Set  *Var[6] 1
		Set  *Var[7] 1
		Set  *Var[8] 1
		Set  *Var[9] 0
		Set  *Var[A] 0
		Set  *Var[B] 0
		Set  *Var[C] 0
		Exec $Script_TexturePan_Update
	EndThread
	Return
	End
}

#new:Script $Script_TexturePan_Update
{
    SetGroup  00000000
    If  *Var[5]  ==  00000001
        If  *Var[6]  ==  00000001
            If  *Var[7]  ==  00000001
                If  *Var[8]  ==  00000001
                    Call  $Function_TexturePan_Simple ( )
                    Return
                EndIf
            EndIf
        EndIf
    EndIf
    Call  $Function_TexturePan_Complex ( )
    Return
    End
}

#new:Function $Function_TexturePan_Simple
{
    ADDIU       SP, SP, FFE8
    SW          S0, 10 (SP)
    COPY        S0, A0
    SW          RA, 14 (SP)
    LW          V1, A8 (S0)
    LW          V0, 88 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o30
    SW          V1, A8 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .o40
    ADDU        V0, V1, V0
    .o30
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .o44
    SUBU        V0, V1, A0
    .o40
    SW          V0, A8 (S0)
    .o44
    LW          V1, AC (S0)
    LW          V0, 8C (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o64
    SW          V1, AC (S0)
    LUI         V0, 2
    BEQ         R0, R0, .o74
    ADDU        V0, V1, V0
    .o64
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .o78
    SUBU        V0, V1, A0
    .o74
    SW          V0, AC (S0)
    .o78
    LW          V1, B0 (S0)
    LW          V0, 90 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o98
    SW          V1, B0 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .oA8
    ADDU        V0, V1, V0
    .o98
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .oAC
    SUBU        V0, V1, A0
    .oA8
    SW          V0, B0 (S0)
    .oAC
    LW          V1, B4 (S0)
    LW          V0, 94 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .oCC
    SW          V1, B4 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .oDC
    ADDU        V0, V1, V0
    .oCC
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .oE0
    SUBU        V0, V1, A0
    .oDC
    SW          V0, B4 (S0)
    .oE0
    LW          A0, 84 (S0)
    JAL         8011BC1C
    LW          A1, A8 (S0)
    LW          A0, 84 (S0)
    JAL         8011BC34
    LW          A1, AC (S0)
    LW          A0, 84 (S0)
    JAL         8011BC4C
    LW          A1, B0 (S0)
    LW          A0, 84 (S0)
    JAL         8011BC64
    LW          A1, B4 (S0)
    LW          RA, 14 (SP)
    LW          S0, 10 (SP)
    CLEAR       V0
    JR          RA
    ADDIU       SP, SP, 18
}

#new:Function $Function_TexturePan_Complex
{
    ADDIU       SP, SP, FFE8
    SW          S0, 10 (SP)
    COPY        S0, A0
    BEQ         A1, R0, .o24
    SW          RA, 14 (SP)
    SW          R0, 70 (S0)
    SW          R0, 74 (S0)
    SW          R0, 78 (S0)
    SW          R0, 7C (S0)
    .o24
    LW          V0, 70 (S0)
    BNE         V0, R0, .o64
    NOP
    LW          V1, A8 (S0)
    LW          V0, 88 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o50
    SW          V1, A8 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .o60
    ADDU        V0, V1, V0
    .o50
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .o64
    SUBU        V0, V1, A0
    .o60
    SW          V0, A8 (S0)
    .o64
    LW          V0, 74 (S0)
    BNE         V0, R0, .oA4
    NOP
    LW          V1, AC (S0)
    LW          V0, 8C (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o90
    SW          V1, AC (S0)
    LUI         V0, 2
    BEQ         R0, R0, .oA0
    ADDU        V0, V1, V0
    .o90
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .oA4
    SUBU        V0, V1, A0
    .oA0
    SW          V0, AC (S0)
    .oA4
    LW          V0, 78 (S0)
    BNE         V0, R0, .oE4
    NOP
    LW          V1, B0 (S0)
    LW          V0, 90 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .oD0
    SW          V1, B0 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .oE0
    ADDU        V0, V1, V0
    .oD0
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .oE4
    SUBU        V0, V1, A0
    .oE0
    SW          V0, B0 (S0)
    .oE4
    LW          V0, 7C (S0)
    BNE         V0, R0, .o124
    NOP
    LW          V1, B4 (S0)
    LW          V0, 94 (S0)
    ADDU        V1, V1, V0
    BGEZ        V1, .o110
    SW          V1, B4 (S0)
    LUI         V0, 2
    BEQ         R0, R0, .o120
    ADDU        V0, V1, V0
    .o110
    LUI         A0, 2
    SLT         V0, A0, V1
    BEQ         V0, R0, .o124
    SUBU        V0, V1, A0
    .o120
    SW          V0, B4 (S0)
    .o124
    LW          A0, 84 (S0)
    JAL         8011BC1C
    LW          A1, A8 (S0)
    LW          A0, 84 (S0)
    JAL         8011BC34
    LW          A1, AC (S0)
    LW          A0, 84 (S0)
    JAL         8011BC4C
    LW          A1, B0 (S0)
    LW          A0, 84 (S0)
    JAL         8011BC64
    LW          A1, B4 (S0)
    LW          V0, 70 (S0)
    LW          V1, 78 (S0)
    LW          A0, 98 (S0)
    ADDIU       V0, V0, 1
    SW          V0, 70 (S0)
    LW          V0, 74 (S0)
    ADDIU       V1, V1, 1
    SW          V1, 78 (S0)
    LW          V1, 70 (S0)
    ADDIU       V0, V0, 1
    SW          V0, 74 (S0)
    LW          V0, 7C (S0)
    SLT         V1, V1, A0
    ADDIU       V0, V0, 1
    BNE         V1, R0, .o198
    SW          V0, 7C (S0)
    SW          R0, 70 (S0)
    .o198
    LW          V0, 74 (S0)
    LW          V1, 9C (S0)
    SLT         V0, V0, V1
    BEQL        V0, R0, .o1AC
    SW          R0, 74 (S0)
    .o1AC
    LW          V0, 78 (S0)
    LW          V1, A0 (S0)
    SLT         V0, V0, V1
    BEQL        V0, R0, .o1C0
    SW          R0, 78 (S0)
    .o1C0
    LW          V0, 7C (S0)
    LW          V1, A4 (S0)
    SLT         V0, V0, V1
    BEQL        V0, R0, .o1D4
    SW          R0, 7C (S0)
    .o1D4
    LW          RA, 14 (SP)
    LW          S0, 10 (SP)
    CLEAR       V0
    JR          RA
    ADDIU       SP, SP, 18
}

% Pipe

#new:Script $Script_EnterTopPipe
{
	Call    DisablePlayerInput   ( .True )
	Call    DisablePlayerPhysics 	( .True )
	Call    HidePlayerShadow 	( .True )
	Call    GetCurrentPartnerID 	( *Var0 )
	If  *Var0  !=  .Partner:None
		Call    DisablePartnerAI 	( 0 )
		Call    EnableNpcShadow 	( .Npc:Partner .False )
		Call    SetNpcFlagBits ( .Npc:Partner 00000002 .True )
		Call    SetNpcPos   	( .Npc:Partner 0 *VarA 0 )
	EndIf
	Set     *Var0  *VarA 
	Call    $Function_Pipe_GetEntryCoords
	Call    PlayerMoveTo 	( *Var1 *Var3 3 )
	Set  	  *Var0  *VarA 
	Call    $Function_Pipe_GetEntryCoords
	Call    SetPlayerPos 	( *Var1 *Var2 *Var3 )
	Call    SetPlayerFlagBits 	( 00200000 .True )
	Call    $Function_Pipe_GetCameraYaw
	Call    InterpPlayerYaw 	( *Var0 0 )
	Wait    2
	Call    SetPlayerFlagBits 	( 00200000 .False )
	Call    GetPlayerPos 	( *Var0 *Var1 *Var2 )
	Call    802D286C ( 00000100 )
	Call    802D2520 ( 00010000 5 2 1 1 0 )
	Wait	  4
	Call PlaySound	( 163 )
	Loop 40` 
		Sub  	  *Var1  1`
		Call    SetPlayerPos 	( *Var0 *Var1 *Var2 )
		Wait	  1 
	EndLoop
	Wait	  1
	Call     802D2520 ( 00010000 0 0 0 0 0 )
	Call     SetPlayerAnimation 	( 00010002 )
	Call     DisablePlayerPhysics 	( .False )
	Call     DisablePlayerInput 	( .False )
	Call     HidePlayerShadow 	( .False )
	Call     GetCurrentPartnerID 	( *Var0 )
	If  *Var0  !=  .Partner:None
		Wait	 4`
		Call    GetPlayerPos    ( *Var4 *Var5 *Var6 )
		Call    SetNpcPos   	  ( .Npc:Partner *Var4 *Var5 *Var6 )
		Call    SetNpcFlagBits  ( .Npc:Partner 00000002 .False )
		Call    EnablePartnerAI
		Call    EnableNpcShadow ( .Npc:Partner .True )
    EndIf
	Exec *VarC
    Return
    End
}

#new:Script $Script_EnterVerticalPipe
{
	Call  DisablePlayerInput    ( .True )
	Call  DisablePlayerPhysics  ( .True )
	Call  DisablePartnerAI      ( 00000000 )
	Call  HidePlayerShadow      ( .True )
	Call  SetPlayerAnimation    ( .PlayerAnim:StandStill )
	Call  GetCurrentPartnerID   ( *Var[0] )
	If  *Var[0]  !=  .Partner:None % 0
		Call  EnableNpcShadow   ( .Npc:Partner .False )
		Call  SetNpcPos ( .Npc:Partner 00000000 -1000` 00000000 )
	EndIf
	Call  GetEntryID    ( *Var[0] )
	Call  $Function_Pipe_GetEntryCoords ( )
	Sub   *Var[2]  40`
	Call  SetPlayerPos  ( *Var[1] *Var[2] *Var[3] )
	Call  InterpPlayerYaw   ( *Var[4] 00000000 )
	Call  PlaySound     ( 00000163 )
	Call  802D286C      ( 00000100 )
	Call  802D2520      ( 00010000 00000005 00000002 00000001 00000001 00000000 )
	Call  GetPlayerPos  ( *Var[0] *Var[1] *Var[2] )
	Loop  40`
		Add   *Var[1]  00000001
		Call  SetPlayerPos  ( *Var[0] *Var[1] *Var[2] )
		Wait  1`
	EndLoop
	Wait  3`
	Call  GetCurrentPartnerID   ( *Var[0] )
	If  *Var[0]  !=  .Partner:None % 0
		Thread
			Call  DisablePartnerAI  ( 00000000 )
			Call  GetPlayerPos      ( *Var[0] *Var[1] *Var[2] )
			Sub   *Var[2]  00000003
			Call  SetNpcPos ( .Npc:Partner *Var[0] *Var[1] *Var[2] )
			Call  SetNpcFlagBits    ( .Npc:Partner 00000002 .False )
			Call  EnablePartnerAI ( )
			Call  EnableNpcShadow   ( .Npc:Partner .True )
		EndThread
	EndIf
	Wait  2`
	Call  802D2520  ( 00010000 00000000 00000000 00000000 00000000 00000000 )
	Wait  1`
	Call  SetPlayerAnimation    ( 00010002 )
	Call  DisablePlayerPhysics  ( .False )
	Call  DisablePlayerInput    ( .False )
	Call  HidePlayerShadow      ( .False )
	Label  0
	Call  $Function_Pipe_GetCurrentFloor ( )
	Wait  1`
	If  *Var[0]  !=  FFFFFFFF % FFFFFFFF
		Goto  0
	EndIf
	Exec  *Var[A]
	Return
	End
}

#new:Script $Script_EnterHorizontalPipe
{
	Call  DisablePlayerInput    ( .True )
	Call  DisablePlayerPhysics  ( .True )
	Call  HidePlayerShadow      ( .True )
	Call  ModifyColliderFlags   ( 00000000 *Var[B] 7FFFFE00 )
	Call  GetEntryID    ( *Var[0] )
	Call  $Function_Pipe_GetEntryCoords ( )
	Set   *Var[5]  *Var[1]
	Set   *Var[6]  *Var[2]
	Set   *Var[7]  *Var[3]
	Add   *Var[2]  2`
	Call  SetPlayerPos  ( *Var[1] *Var[2] *Var[3] )
	Call  InterpPlayerYaw       ( *Var[4] 00000000 )
	If  *Var[4]  ==  90`
		Add   *Var[5]  40`
	Else
		Sub   *Var[5]  40`
	EndIf
	Call  UseSettingsFrom   ( .Cam:Default *Var[5] *Var[6] *Var[7] )
	Call  SetPanTarget      ( .Cam:Default *Var[5] *Var[6] *Var[7] )
	Call  SetCamSpeed       ( .Cam:Default *Fixed[90.0] )
	Call  PanToTarget       ( .Cam:Default 00000000 00000001 )
	Call  GetCurrentPartnerID   ( *Var[0] )
	If  *Var[0]  !=  .Partner:None % 0
		Call  DisablePartnerAI  ( 00000000 )
		Call  EnableNpcShadow   ( .Npc:Partner .False )
		Call  SetNpcPos ( .Npc:Partner 00000000 -1000` 00000000 )
		Call  InterpNpcYaw      ( .Npc:Partner *Var[0] 00000000 )
	EndIf
	Wait  1`
	Call  PlaySound ( 00000163 )
	Thread
		Wait  25`
		Call  HidePlayerShadow  ( .False )
	EndThread
	Call  802D286C  ( 00000900 )
	Call  802D2520  ( 00010002 00000005 00000003 00000001 00000001 00000000 )
	Loop  40`
		Call  $Function_Pipe_GetPointInFrontOfPlayer ( *Fixed[1.0] )
		Call  SetPlayerPos  ( *Var[0] *Var[1] *Var[2] )
		Wait  1`
	EndLoop
	Call  GetCurrentPartnerID   ( *Var[0] )
	If  *Var[0]  !=  .Partner:None % 0
		Thread
			Call  GetPlayerPos      ( *Var[0] *Var[1] *Var[2] )
			Sub   *Var[2]  00000003
			Call  SetNpcPos ( .Npc:Partner *Var[0] *Var[1] *Var[2] )
			Call  EnableNpcShadow   ( .Npc:Partner .True )
			Call  EnablePartnerAI ( )
		EndThread
	EndIf
	Wait  5`
	Call  802D2520  ( 00010002 00000000 00000000 00000000 00000000 00000000 )
	Call  ModifyColliderFlags   ( 00000001 *Var[B] 7FFFFE00 )
	Call  DisablePlayerInput    ( .False )
	Call  DisablePlayerPhysics  ( .False )
	Call  PanToTarget   ( .Cam:Default 00000000 00000000 )
	Exec  *Var[A]
	Return
	End
}

/%
	ARGS:
	*Var[A]  entryID
	*Var[B]  colliderID
	*Var[C]  $Script_GotoMap
%/
#new:Script $Script_ExitVerticalPipe
{
	Call  $Function_Pipe_CheckDownInput ( )
	If  *Var[0]  ==  00000000
		Return
	EndIf
	Call  GetCurrentPartner ( *Var[0] )
	If  *Var[0]  !=  00000000
		Call  GetCurrentPartnerID   ( *Var[1] )
		If  *Var[1]  !=  .Partner:Watt % 6
			Return
		Else
			Call  802D2B6C ( )
			Call  DisablePlayerInput    ( .True )
		EndIf
	Else
		Call  DisablePlayerInput    ( .True )
	EndIf
/%
	ExecWait  $Script_80241230
	Return
	End
}

#new:Script $Script_80241230
{
%/
	SetGroup  0000001B
	Call  $Function_Pipe_SetAnimFlag ( )
	Call  DisablePlayerPhysics  ( .True )
	Call  HidePlayerShadow  ( .True )
	Set   *Var[0]  *Var[A]
	Call  $Function_Pipe_GetEntryCoords ( )
	Call  PlayerMoveTo      ( *Var[1] *Var[3] 00000003 )
	Set   *Var[0]  *Var[A]
	Call  $Function_Pipe_GetEntryCoords ( )
	Call  SetPlayerPos      ( *Var[1] *Var[2] *Var[3] )
	Call  SetPlayerFlagBits ( 00200000 .True )
	Call  $Function_Pipe_GetCameraYaw ( )
	Call  InterpPlayerYaw   ( *Var[0] 00000000 )
	Wait  2`
	Call  SetPlayerFlagBits ( 00200000 .False )
	Call  PlaySound ( 00000163 )
	Call  GetPlayerPos      ( *Var[0] *Var[1] *Var[2] )
	Thread
		Wait  4`
		Loop  40`
			Sub   *Var[1]  00000001
			Call  SetPlayerPos  ( *Var[0] *Var[1] *Var[2] )
			Wait  1`
		EndLoop
	EndThread
	Call  802D286C  ( 00000800 )
	Call  802D2520  ( 00010002 00000005 00000002 00000001 00000001 00000000 )
	Wait  25`
	ExecWait  *Var[C]
	Return
	End
}

/%
	ARGS:
	*Var[A]  entryID
	*Var[B]  colliderID
	*Var[C]  $Script_GotoMap
%/
#new:Script $Script_ExitHorizontalPipe
{
	Call  802D249C  ( *Var[0] )
	If  *Var[0]  ==  00000000
		Return
	EndIf
	Call  GetPlayerActionState  ( *Var[0] )
	If  *Var[0]  ==  .ActionState:Spin % 1A
		Return
	EndIf
	Call  GetCurrentPartner ( *Var[0] )
	If  *Var[0]  !=  .ActionState:Idle % 0
		Call  GetCurrentPartnerID   ( *Var[1] )
		If  *Var[1]  !=  .Partner:Watt % 6
			Return
		Else
			Call  802D2B6C ( )
			Call  DisablePlayerInput    ( .True )
		EndIf
	Else
		Call  DisablePlayerInput    ( .True )
	EndIf
	SetGroup  0000001B
	Call  $Function_Pipe_SetAnimFlag ( )
	Call  DisablePlayerPhysics  ( .True )
	Call  ModifyColliderFlags   ( 00000000 *Var[B] 7FFFFE00 )
	Set   *Var[0]  *Var[A]
	Call  $Function_Pipe_GetEntryCoords ( )
	Set   *Var[5]  *Var[1]
	Set   *Var[6]  *Var[2]
	Add   *Var[6]  2`
	Set   *Var[7]  *Var[3]
	Set   *Var[8]  *Var[4]
	Add   *Var[8]  180`
	If  *Var[4]  >=  360`
		Sub   *Var[4]  360`
	EndIf
	Call  InterpPlayerYaw       ( *Var[8] 00000001 )
	Wait  1`
	Call  PlaySound     ( 00000163 )
	Call  GetPlayerPos  ( *Var[0] *Var[1] *Var[2] )
	Call  SetPlayerPos  ( *Var[0] *Var[6] *Var[7] )
	Call  SetPlayerAnimation    ( .PlayerAnim:StandStill )
	Call  802D286C      ( 00000800 )
	Call  802D2520      ( 00010000 00000005 00000003 00000001 00000001 00000000 )
	Thread
		Wait  8`
		Call  HidePlayerShadow  ( .True )
	EndThread
	Thread
		Wait  3`
		Loop  40`
			Call  $Function_Pipe_GetPointInFrontOfPlayer ( *Fixed[1.0] )
			Call  SetPlayerPos  ( *Var[0] *Var[1] *Var[2] )
			Wait  1`
		EndLoop
	EndThread
	Wait  25`
	ExecWait  *Var[C]
	Return
	End
}

#new:Function $Function_Pipe_SetAnimFlag
{
	LAW       V0, 800F7B30
	LW        V1, 4 (V0)
	LUI       A0, 10
	OR        V1, V1, A0
	SW        V1, 4 (V0)
	JR        RA
	ADDIU     V0, R0, 2
}

#new:Function $Function_Pipe_GetCurrentFloor
{
	LAH       V0, 8015A552
	SW        V0, 84 (A0)
	JR        RA
	ADDIU     V0, R0, 2
}

#new:Function $Function_Pipe_CheckDownInput
{
	LAH       V1, 8015A552
	ADDIU     SP, SP, FFE8
	SW        S0, 10 (SP)
	COPY      S0, A0
	SW        RA, 14 (SP)
	LW        V0, B0 (S0)
	BEQ       V1, V0, .o2C
	ADDIU     V0, R0, 2
	BEQ       R0, R0, .oAC
	SW        R0, 84 (S0)
	.o2C
	LAW       V1, 8007419C
	LB        V0, 40 (V1)
	LB        A3, 44 (V1)
	BLTZL     V0, .o44
	SUBU      V0, R0, V0
	.o44
	BNE       V0, R0, .o54
	NOP
	BEQL      A3, R0, .oAC
	CLEAR     V0
	.o54
	MTC1      V0, F4
	NOP
	CVT.S.W   F4, F4
	MFC1      A2, F4
	MTC1      A3, F4
	NOP
	CVT.S.W   F4, F4
	MTC1      R0, F12
	MFC1      A3, F4
	JAL       ~Func:atan2
	MOV.S     F14, F12
	LIF       F2, 60.0
	NOP
	C.LT.S    F0, F2
	NOP
	BC1F      .oA8
	ADDIU     V0, R0, 1
	SW        V0, 84 (S0)
	BEQ       R0, R0, .oAC
	ADDIU     V0, R0, 2
	.oA8
	CLEAR     V0
	.oAC
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	JR        RA
	ADDIU     SP, SP, 18
}

#new:Function $Function_Pipe_GetEntryCoords
{
	ADDIU     SP, SP, FFE0
	SW        S1, 14 (SP)
	COPY      S1, A0
	SW        RA, 1C (SP)
	SW        S2, 18 (SP)
	JAL       ~Func:get_current_map_header
	SW        S0, 10 (SP)
	COPY      A0, S1
	LIO       A1, *Var[0]
	JAL       ~Func:get_variable
	COPY      S2, V0
	COPY      A0, S1
	LUI       A1, FE36
	LW        V1, 14 (S2)
	SLL       S0, V0, 4
	ADDU      V1, S0, V1
	LWC1      F0, 0 (V1)
	TRUNC.W.S F2, F0
	MFC1      A2, F2
	JAL       ~Func:set_variable
	ORI       A1, A1, 3C81 % Var[1]
	COPY      A0, S1
	LW        V0, 14 (S2)
	LUI       A1, FE36
	ADDU      V0, S0, V0
	LWC1      F0, 4 (V0)
	TRUNC.W.S F2, F0
	MFC1      A2, F2
	JAL       ~Func:set_variable
	ORI       A1, A1, 3C82 % Var[2]
	COPY      A0, S1
	LW        V0, 14 (S2)
	LUI       A1, FE36
	ADDU      V0, S0, V0
	LWC1      F0, 8 (V0)
	TRUNC.W.S F2, F0
	MFC1      A2, F2
	JAL       ~Func:set_variable
	ORI       A1, A1, 3C83 % Var[3]
	COPY      A0, S1
	LW        V0, 14 (S2)
	LUI       A1, FE36
	ADDU      S0, S0, V0
	LWC1      F0, C (S0)
	TRUNC.W.S F2, F0
	MFC1      A2, F2
	JAL       ~Func:set_variable
	ORI       A1, A1, 3C84 % Var[4]
	LW        RA, 1C (SP)
	LW        S2, 18 (SP)
	LW        S1, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 20
}

#new:Function $Function_Pipe_GetCameraYaw
{
	LAW       V1, 80077410
	LIF       F12, 180.0
	ADDIU     SP, SP, FFE8
	SW        RA, 14 (SP)
	SW        S0, 10 (SP)
	SLL       V0, V1, 2
	ADDU      V0, V0, V1
	SLL       V0, V0, 2
	SUBU      V0, V0, V1
	SLL       V1, V0, 3
	ADDU      V0, V0, V1
	SLL       V0, V0, 3
	LTF       F0, V0 (800B1DEC)
	ADD.S     F12, F0, F12
	JAL       ~Func:clamp_angle
	COPY      S0, A0
	TRUNC.W.S F2, F0
	SWC1      F2, 84 (S0)
	LW        RA, 14 (SP)
	LW        S0, 10 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 18
}

#new:Function $Function_Pipe_GetPointInFrontOfPlayer
{
	ADDIU     SP, SP, FFD8
	SW        S0, 18 (SP)
	COPY      S0, A0
	SW        RA, 1C (SP)
	SDC1      F20, 20 (SP)
	LW        V0, C (S0)
	JAL       ~Func:get_float_variable
	LW        A1, 0 (V0)
	ADDIU     A0, SP, 10
	LIA       V0, 8010EFC8
	MFC1      A2, F0
	LWC1      F0, 28 (V0) % player X
	LWC1      F2, 30 (V0) % player Z
	SWC1      F0, 10 (SP) % arg0 for add_vec2D_polar
	SWC1      F2, 14 (SP) % arg1 for add_vec2D_polar
	LW        A3, 80 (V0)
	LWC1      F20, 2C (V0)
	JAL       ~Func:add_vec2D_polar
	ADDIU     A1, SP, 14
	COPY      A0, S0
	LUI       A1, FE36
	LW        A2, 10 (SP)
	JAL       ~Func:set_float_variable
	ORI       A1, A1, 3C80 % Var[0]
	COPY      A0, S0
	LUI       A1, FE36
	MFC1      A2, F20
	JAL       ~Func:set_float_variable
	ORI       A1, A1, 3C81 % Var[1]
	COPY      A0, S0
	LUI       A1, FE36
	LW        A2, 14 (SP)
	JAL       ~Func:set_float_variable
	ORI       A1, A1, 3C82 % Var[2]
	LW        RA, 1C (SP)
	LW        S0, 18 (SP)
	LDC1      F20, 20 (SP)
	ADDIU     V0, R0, 2
	JR        RA
	ADDIU     SP, SP, 28
}

% Tattle

#new:Function $Function_GetTattle_Pit
{
PUSH    RA, A0, A1, A2, A3, V1, S0
COPY    S0, A0
LIO     A1, *AreaByte[0]
JAL     ~Func:get_variable
RESERVED
COPY	V1, V0
SLTIU   A0, V1, 50`
LIO     V0, $String_Tattle_1
BNE     A0, R0, .End
RESERVED
SLTIU   A0, V1, 80`
LIO     V0, $String_Tattle_2
BNE     A0, R0, .End
RESERVED
LIO     V0, $String_Tattle_3
.End
POP     RA, A0, A1, A2, A3, V1, S0
JR      RA
NOP
}

% Strings

#string $String_Tattle_1 {
[Style Tattle][EnableCDownNext]
This is the pit of 100 trials,[BR]
this place seems to have no end,[BR]
I wonder when we'll get to the[BR]
end...
[Wait][End]
}

#string $String_Tattle_2 {
[Style Tattle][EnableCDownNext]
This is the pit of 100 trials,[BR]
this place seems to have no end,[BR]
I wonder when we'll get to the[BR]
end...[BR]
[Wait][Next]
The air seems to be a little thinner,[BR]
we are already quite deep in the pit,[BR]
I just wonder when it will finish.
[Wait][End]
}

#string $String_Tattle_3 {
[Style Tattle][EnableCDownNext]
This is the pit of 100 trials,[BR]
this place seems to have no end,[BR]
I wonder when we'll get to the[BR]
end...[BR]
[Wait][Next]
Isn't easy to breathe on these[BR]
floors, we're very deep in the pit,[BR]
and the water doesn't even come out[BR]
of the drain anymore,[BR]
[Wait][Next]
Mario, now I wonder how they clean[BR]
these floors actually, ew!
[Wait][End]
}

/%
Floors

Floor 1/6 - Gloomba
Floor 2/7 - Koopatropa
Floor 3/8 - Paratroopa
Floor 4/9 - Fuzzy
Floor 5   - Bob-omb

Floor 11/16 - Paragloomba
Floor 12/17 - Monty Mole
Floor 13/18 - Cleft
Floor 14/19 - Bandit
Floor 15    - Pokey Mummy

Floor 22/26 - Spiky Gloomba
Floor 22/27 - Buzzy Beetle
Floor 23/28 - Stone Chomp
Floor 24/29 - Piranha Plant
Floor 25    - Forest Fuzzy

Floor 31/36 - Dark Koopa
Floor 32/37 - Hyper Paragoomba
Floor 33/38 - Hyper Cleft
Floor 34/39 - Hyper Goomba
Floor 35    - Clubba

Floor 41/46 - Dark Paratroopa
Floor 42/47 - Shy Guy
Floor 43/48 - Groove Guy
Floor 44/49 - Spy Guy
Floor 45    - Pyro Guy

Floor 51/56 - [Badge Bandit]
Floor 52/57 - Jungle Fuzzy
Floor 53/58 - Spear Guy
Floor 54/59 - Putrid Piranha
Floor 55    - Lava Bubble

Floor 61/66 - [Dark Lakitu]
Floor 62/67 - Spike Top
Floor 63/68 - Crazee Dayzee
Floor 64/69 - Bzzap!
Floor 65    - Ruff Puff

Floor 71/76 - [Dark Hammer Bro]
Floor 72/77 - Lakitu
Floor 73/78 - Gulpit
Floor 74/79 - Frost Piranha
Floor 75    - Duplighost

Floor 81/86 - [Dark Monty Mole]
Floor 82/87 - Koopatrol
Floor 83/88 - Hammer Bro
Floor 84/89 - Dry Bones
Floor 85    - [[Dark Monty Mole]]

Floor 91/96 - [Dark Magikoopa]
Floor 92/97 - [Poison Puff]
Floor 93/98 - [Dark Ember]
Floor 94/99 - [Swampire]
Floor 95    - [[Dark Magikoopa]]
%/